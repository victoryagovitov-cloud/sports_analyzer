#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (watchdog) –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
"""

import time
import threading
import logging
import psutil
from datetime import datetime, timedelta
from config import ANALYSIS_SETTINGS

logger = logging.getLogger(__name__)

class SystemWatchdog:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.is_running = False
        self.last_heartbeat = datetime.now()
        self.watchdog_thread = None
        self.max_memory_percent = ANALYSIS_SETTINGS['max_memory_usage_percent']
        self.check_interval = ANALYSIS_SETTINGS['watchdog_interval_seconds']
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ watchdog"""
        if self.is_running:
            logger.warning("Watchdog —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        logger.info("üêï –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ watchdog")
        self.is_running = True
        self.last_heartbeat = datetime.now()
        
        self.watchdog_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.watchdog_thread.start()
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ watchdog"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ watchdog")
        self.is_running = False
        if self.watchdog_thread:
            self.watchdog_thread.join(timeout=5)
    
    def heartbeat(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ heartbeat - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        self.last_heartbeat = datetime.now()
        
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"Watchdog –∑–∞–ø—É—â–µ–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫")
        
        while self.is_running:
            try:
                self._check_system_health()
                time.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ watchdog: {e}")
                time.sleep(self.check_interval)
    
    def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ heartbeat
        time_since_heartbeat = datetime.now() - self.last_heartbeat
        if time_since_heartbeat > timedelta(minutes=10):
            logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç heartbeat —É–∂–µ {time_since_heartbeat}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        memory_percent = psutil.virtual_memory().percent
        if memory_percent > self.max_memory_percent:
            logger.warning(f"‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent}%")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > 90:
            logger.warning(f"‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
        disk_usage = psutil.disk_usage('/')
        disk_percent = (disk_usage.used / disk_usage.total) * 100
        if disk_percent > 90:
            logger.warning(f"‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent}%")
            
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if datetime.now().minute % 10 == 0 and datetime.now().second < self.check_interval:
            logger.info(f"üíö –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ - CPU: {cpu_percent}%, RAM: {memory_percent}%, –î–∏—Å–∫: {disk_percent:.1f}%")

class AnalysisTimeoutManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, timeout_seconds=300):
        self.timeout_seconds = timeout_seconds
        self.start_time = None
        self.is_running = False
        
    def start_analysis(self):
        """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.start_time = time.time()
        self.is_running = True
        logger.info(f"‚è±Ô∏è  –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {self.timeout_seconds} —Å–µ–∫")
        
    def check_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
        if not self.is_running or not self.start_time:
            return False
            
        elapsed = time.time() - self.start_time
        if elapsed > self.timeout_seconds:
            logger.error(f"‚è∞ –¢–ê–ô–ú–ê–£–¢: –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª {self.timeout_seconds} —Å–µ–∫ (–ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫)")
            return True
        return False
        
    def finish_analysis(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.start_time:
            elapsed = time.time() - self.start_time
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫")
        self.is_running = False
        self.start_time = None

class RetryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    
    def __init__(self, max_retries=3, delay_seconds=5):
        self.max_retries = max_retries
        self.delay_seconds = delay_seconds
        
    def execute_with_retry(self, func, operation_name="–æ–ø–µ—Ä–∞—Ü–∏—è"):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            try:
                result = func()
                if attempt > 0:
                    logger.info(f"‚úÖ {operation_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å {attempt + 1} –ø–æ–ø—ã—Ç–∫–∏")
                return result
            except Exception as e:
                if attempt < self.max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è  {operation_name} –Ω–µ—É–¥–∞—á–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.delay_seconds} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(self.delay_seconds)
                else:
                    logger.error(f"‚ùå {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise e

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä watchdog
system_watchdog = SystemWatchdog()