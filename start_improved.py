#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ AI-—Å–∏—Å—Ç–µ–º—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
"""

import logging
import sys
import signal
import os
import time
from datetime import datetime
from enhanced_live_system import EnhancedLiveSystem
from system_watchdog import system_watchdog, AnalysisTimeoutManager
from config import ANALYSIS_SETTINGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler('improved_production.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ImprovedProductionSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–∏—Å—Ç–µ–º–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
    
    def __init__(self):
        self.system = None
        self.running = False
        self.timeout_manager = AnalysisTimeoutManager(ANALYSIS_SETTINGS['analysis_timeout_seconds'])
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
        if self.system:
            system_watchdog.stop()
        
    def start(self, mode='continuous'):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
            
            logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –ü–†–û–î–ê–ö–®–ï–ù –°–ò–°–¢–ï–ú–´")
            logger.info("=" * 70)
            logger.info(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}")
            logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info(f"–¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞: {ANALYSIS_SETTINGS['analysis_timeout_seconds']} —Å–µ–∫")
            logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {ANALYSIS_SETTINGS['max_memory_usage_percent']}%")
            logger.info("=" * 70)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            if not self._check_system_requirements():
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Å–∏—Å—Ç–µ–º—ã...")
            self.system = EnhancedLiveSystem()
            logger.info("‚úÖ AI-—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram
            logger.info("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
            if not self.system.telegram_integration.test_connection():
                logger.error("‚ùå Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞")
                return False
            logger.info("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.running = True
            
            if mode == 'continuous':
                return self.run_continuous()
            elif mode == 'single':
                return self.run_single()
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
                return False
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:")
            return False
    
    def _check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        try:
            import psutil
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            if memory.available < 500 * 1024 * 1024:  # –ú–µ–Ω–µ–µ 500 –ú–ë
                logger.warning(f"‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory.available / (1024*1024):.1f} –ú–ë")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
            disk = psutil.disk_usage('/')
            if disk.free < 1024 * 1024 * 1024:  # –ú–µ–Ω–µ–µ 1 –ì–ë
                logger.warning(f"‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {disk.free / (1024*1024*1024):.1f} –ì–ë")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            required_modules = {
                'requests': 'requests',
                'beautifulsoup4': 'bs4',  # beautifulsoup4 –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ bs4
                'fuzzywuzzy': 'fuzzywuzzy',
                'schedule': 'schedule',
                'psutil': 'psutil'
            }
            for package_name, import_name in required_modules.items():
                try:
                    __import__(import_name)
                except ImportError:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å: {package_name} (–∏–º–ø–æ—Ä—Ç: {import_name})")
                    return False
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def run_continuous(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
        logger.info("üîÑ –ó–ê–ü–£–°–ö –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –†–ï–ñ–ò–ú–ê –° –ó–ê–©–ò–¢–û–ô –û–¢ –ó–ê–í–ò–°–ê–ù–ò–Ø")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 24/7")
        logger.info("–ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç")
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        logger.info("-" * 70)
        
        restart_count = 0
        max_restarts = 5
        
        while self.running and restart_count < max_restarts:
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ #{restart_count + 1}")
                self.system.run_continuous()
                break  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
                
            except Exception as e:
                restart_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}/{max_restarts}): {e}")
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                
                if restart_count < max_restarts:
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(30)
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                    try:
                        self.system = EnhancedLiveSystem()
                        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
                    except Exception as restart_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {restart_error}")
                        break
                else:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤")
                    break
        
        self.shutdown()
        return restart_count < max_restarts
    
    def run_single(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        logger.info("üîç –ó–ê–ü–£–°–ö –û–î–ò–ù–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –° –¢–ê–ô–ú–ê–£–¢–û–ú")
        logger.info("-" * 70)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.timeout_manager.start_analysis()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            self.system.run_single()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
            if self.timeout_manager.check_timeout():
                logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                return False
            else:
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            return False
        finally:
            self.timeout_manager.finish_analysis()
            self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
        logger.info(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ watchdog
        try:
            system_watchdog.stop()
            logger.info("‚úÖ Watchdog –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ watchdog: {e}")
        
        logger.info("=" * 70)
        self.running = False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 start_improved.py continuous  # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π")
        print("  python3 start_improved.py single     # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
        sys.exit(1)
    
    mode = sys.argv[1].lower()
    
    if mode not in ['continuous', 'single']:
        print("–û—à–∏–±–∫–∞: —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'continuous' –∏–ª–∏ 'single'")
        sys.exit(1)
    
    production = ImprovedProductionSystem()
    success = production.start(mode)
    
    if success:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(0)
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)

if __name__ == "__main__":
    main()