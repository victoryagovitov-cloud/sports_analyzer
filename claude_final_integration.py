import json
import logging
import os
from typing import List, Dict, Any
from multi_source_controller import MatchData
from config import ANALYSIS_SETTINGS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

logger = logging.getLogger(__name__)

class ClaudeFinalIntegration:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Cursor Claude (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) -> OpenAI (–ø–ª–∞—Ç–Ω–æ) -> —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π Claude (–ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        self.use_cursor_claude = ANALYSIS_SETTINGS.get('use_cursor_claude', False)
        if self.use_cursor_claude:
            try:
                from cursor_claude_analyzer import cursor_claude_analyzer
                self.cursor_claude = cursor_claude_analyzer
                self.logger.info("üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ô Claude —á–µ—Ä–µ–∑ Cursor –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            except ImportError:
                self.use_cursor_claude = False
                self.logger.warning("‚ö†Ô∏è  Cursor Claude –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            self.logger.info("Claude —á–µ—Ä–µ–∑ Cursor –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º OpenAI –∫–∞–∫ fallback
        if ANALYSIS_SETTINGS.get('use_openai_gpt', False):
            try:
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                from enhanced_openai_analyzer import EnhancedOpenAIAnalyzer
                api_key = os.getenv('OPENAI_API_KEY')
                if api_key:
                    self.openai_analyzer = EnhancedOpenAIAnalyzer(api_key)
                    self.use_openai = True
                    self.use_enhanced = True
                    self.logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
                    try:
                        from external_knowledge_analyzer import get_external_knowledge_analyzer
                        self.external_analyzer = get_external_knowledge_analyzer(api_key)
                        self.use_external_knowledge = True
                        self.logger.info("üåê –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    except ImportError:
                        self.use_external_knowledge = False
                else:
                    self.use_openai = False
                    self.use_enhanced = False
                    self.use_external_knowledge = False
                    self.logger.warning("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            except ImportError:
                try:
                    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                    from openai_integration import OpenAIAnalyzer
                    api_key = os.getenv('OPENAI_API_KEY')
                    if api_key:
                        self.openai_analyzer = OpenAIAnalyzer(api_key)
                        self.use_openai = True
                        self.use_enhanced = False
                        self.use_external_knowledge = False
                        self.logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        self.use_openai = False
                        self.use_enhanced = False
                        self.use_external_knowledge = False
                except ImportError:
                    self.use_openai = False
                    self.use_enhanced = False
                    self.use_external_knowledge = False
                    self.logger.warning("‚ö†Ô∏è  OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        else:
            self.use_openai = False
            self.use_enhanced = False
            self.use_external_knowledge = False
            self.logger.info("OpenAI –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    def analyze_matches_with_claude(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ —Å –ø–æ–º–æ—â—å—é AI (OpenAI GPT –∏–ª–∏ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)
        """
        if not matches:
            return []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: Claude (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) -> OpenAI (–ø–ª–∞—Ç–Ω–æ) -> —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Claude —á–µ—Ä–µ–∑ Cursor
        if self.use_cursor_claude:
            try:
                self.logger.info("üÜì –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–°–ü–õ–ê–¢–ù–´–ô Claude —á–µ—Ä–µ–∑ Cursor")
                return self.cursor_claude.analyze_matches_with_cursor_claude(matches, sport_type)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ Cursor Claude, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI: {e}")
        
        # Fallback –Ω–∞ OpenAI GPT –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_openai:
            try:
                # –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                if self.use_external_knowledge:
                    self.logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏")
                    external_recommendations = self.external_analyzer.analyze_with_external_knowledge(matches, sport_type)
                    if external_recommendations:
                        return external_recommendations
                    else:
                        self.logger.info("üåê –í–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –Ω–µ –¥–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑
                self.logger.info("üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑")
                if self.use_enhanced:
                    return self.openai_analyzer.analyze_matches_with_enhanced_gpt(matches, sport_type)
                else:
                    return self.openai_analyzer.analyze_matches_with_gpt(matches, sport_type)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ OpenAI –∞–Ω–∞–ª–∏–∑–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π: {e}")
                # Fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        
        # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        self.logger.info(f"–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        max_matches = 5
        matches_to_analyze = matches[:max_matches]
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt = self._create_detailed_analysis_prompt(matches_to_analyze, sport_type)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        heuristic_response = self._fallback_heuristic_analysis(prompt)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        recommendations = self._process_claude_response(heuristic_response, matches_to_analyze)
        
        self.logger.info(f"–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {sport_type}")
        return recommendations
    
    def _create_detailed_analysis_prompt(self, matches: List[MatchData], sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π
        matches_text = ""
        for i, match in enumerate(matches, 1):
            matches_text += f"{i}. {match.team1} vs {match.team2}\n"
            matches_text += f"   –°—á–µ—Ç: {match.score}\n"
            matches_text += f"   –ú–∏–Ω—É—Ç–∞: {match.minute}\n"
            matches_text += f"   –õ–∏–≥–∞: {match.league}\n"
            matches_text += f"   URL: {match.link}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
        rules = {
            'football': """
            –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –§–£–¢–ë–û–õ–ê:
            1. –ù–∞–π–¥–∏ –º–∞—Ç—á–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–µ–¥–µ—Ç —Å —Ä–∞–∑—Ä—ã–≤–æ–º ‚â•1 –≥–æ–ª (1:0, 2:1, 3:2, etc.)
            2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ø–í–ù–´–ú –§–ê–í–û–†–ò–¢–û–ú
            3. –í—Ä–µ–º—è –º–∞—Ç—á–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â•45 –º–∏–Ω—É—Ç (–º–∏–Ω–∏–º—É–º –≤—Ç–æ—Ä–æ–π —Ç–∞–π–º)
            4. –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞ >85%
            
            –ö–†–ò–¢–ï–†–ò–ò –Ø–í–ù–û–ì–û –§–ê–í–û–†–ò–¢–ê:
            - –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—ã—à–µ –Ω–∞ ‚â•3 –º–µ—Å—Ç–∞ –ò–õ–ò —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –æ—á–∫–∞—Ö ‚â•10
            - –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥: —É —Ñ–∞–≤–æ—Ä–∏—Ç–∞ ‚â•4 –ø–æ–±–µ–¥—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π
            - –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–∞: –∏–≥—Ä–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–æ—Å—Ç–∞–≤)
            - –ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á: —Ñ–∞–≤–æ—Ä–∏—Ç –≤—ã–∏–≥—Ä–∞–ª ‚â•3 –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π
            - –î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –µ—Å–ª–∏ —Ñ–∞–≤–æ—Ä–∏—Ç –∏–≥—Ä–∞–µ—Ç –¥–æ–º–∞ (+10% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
            - –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–≥–∏: —Ç–æ–ø-–ª–∏–≥–∏ (Premier League, La Liga, Serie A, Bundesliga, Ligue 1) = –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
            
            –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ê–¢–ß–ê –ü–†–û–í–ï–†–¨:
            - –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥ (—Ä–µ–π—Ç–∏–Ω–≥, –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∞)
            - –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5-10 –º–∞—Ç—á–µ–π
            - –ú–æ—Ç–∏–≤–∞—Ü–∏—è (–±–æ—Ä—å–±–∞ –∑–∞ —Ç–∏—Ç—É–ª, –µ–≤—Ä–æ–∫—É–±–∫–∏, –ø—Ä–æ—Ç–∏–≤ –≤—ã–ª–µ—Ç–∞)
            - –¢—Ä–∞–≤–º—ã –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—Å—Ç–∏–ª—å –∏–≥—Ä—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)
            - –í—Ä–µ–º—è –º–∞—Ç—á–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            
            –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò:
            - –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ ‚â•2 –≥–æ–ª–æ–≤ - –º–æ–∂–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –º–µ–Ω—å—à–µ–º —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–µ (>80%)
            - –ï—Å–ª–∏ –≤—Ä–µ–º—è >70 –º–∏–Ω—É—Ç - –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            - –î–µ—Ä–±–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
            - –ö—É–±–∫–æ–≤—ã–µ –º–∞—Ç—á–∏ - —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –∫–ª–∞—Å—Å–µ –∫–æ–º–∞–Ω–¥
            """,
            'tennis': """
            –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –¢–ï–ù–ù–ò–°–ê:
            1. –ù–∞–π–¥–∏ –¢–û–õ–¨–ö–û –º–∞—Ç—á–∏ —Å–æ —Å—á–µ—Ç–æ–º 1-0 –ø–æ —Å–µ—Ç–∞–º –ò–õ–ò —Ä–∞–∑—Ä—ã–≤–æ–º ‚â•4 –≥–µ–π–º–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Å–µ—Ç–µ
            2. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫, –≤–µ–¥—É—â–∏–π –≤ —Å—á–µ—Ç–µ, –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º
            3. –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞ >80%
            
            –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ê–¢–ß–ê –ü–†–û–í–ï–†–¨:
            - –†–µ–π—Ç–∏–Ω–≥ ATP/WTA (—Ä–∞–∑–Ω–∏—Ü–∞ ‚â• 20 –ø–æ–∑–∏—Ü–∏–π)
            - –§–æ—Ä–º—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π (‚â• 4 –ø–æ–±–µ–¥—ã —É –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
            - –ò—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á (H2H: ‚â• 3 –ø–æ–±–µ–¥—ã –∏–∑ 5)
            - –¢—É—Ä–Ω–∏—Ä (Grand Slam, ATP 250 –∏ —Ç.–¥. ‚Äî –≤–∞–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–¥–∞—á–∏ –∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–∞ –ø—Ä–∏—ë–º–µ
            - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–µ—Ç–∞
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ç–∞–º (–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–æ–≤)
            """,
            'table_tennis': """
            –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ù–ê–°–¢–û–õ–¨–ù–û–ì–û –¢–ï–ù–ù–ò–°–ê:
            1. –ù–∞–π–¥–∏ –¢–û–õ–¨–ö–û –º–∞—Ç—á–∏ —Å–æ —Å—á–µ—Ç–æ–º 1-0 –∏–ª–∏ 2-0 –ø–æ —Å–µ—Ç–∞–º
            2. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫, –≤–µ–¥—É—â–∏–π –≤ —Å—á–µ—Ç–µ, –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º
            3. –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞ >80%
            
            –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ê–¢–ß–ê –ü–†–û–í–ï–†–¨:
            - –†–µ–π—Ç–∏–Ω–≥ ITTF (—Ä–∞–∑–Ω–∏—Ü–∞ ‚â• 50 –ø–æ–∑–∏—Ü–∏–π)
            - –§–æ—Ä–º—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π (‚â• 4 –ø–æ–±–µ–¥—ã —É –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
            - –ò—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á (H2H: ‚â• 3 –ø–æ–±–µ–¥—ã –∏–∑ 5)
            - –¢—É—Ä–Ω–∏—Ä (ITTF World Tour, European Championships –∏ —Ç.–¥.)
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–¥–∞—á–∏ –∏ –ø—Ä–∏–µ–º–∞
            - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–µ—Ç–∞
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ç–∞–º (–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–æ–≤)
            """,
            'handball': """
            –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ì–ê–ù–î–ë–û–õ–ê:
            1. –ù–∞–π–¥–∏ –¢–û–õ–¨–ö–û –º–∞—Ç—á–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–µ–¥–µ—Ç —Å —Ä–∞–∑—Ä—ã–≤–æ–º ‚â•5 –≥–æ–ª–æ–≤
            2. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞, –≤–µ–¥—É—â–∞—è –≤ —Å—á–µ—Ç–µ, –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º
            3. –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞ >80%
            
            –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ê–¢–ß–ê –ü–†–û–í–ï–†–¨:
            - –ü–æ–∑–∏—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ (—Ä–∞–∑–Ω–∏—Ü–∞ ‚â• 3 –ø–æ–∑–∏—Ü–∏–π)
            - –§–æ—Ä–º—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π (‚â• 4 –ø–æ–±–µ–¥—ã —É –≤–µ–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã)
            - –°—Ä–µ–¥–Ω—é—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
            - –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–≥–∏ (–≤—ã—Å—à–∏–µ –ª–∏–≥–∏ = –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            - –í—Ä–µ–º—è –º–∞—Ç—á–∞ (—á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞)
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç–∞–∫ –∏ –∑–∞—â–∏—Ç—ã
            """
        }
        
        sport_rules = rules.get(sport_type, rules['football'])
        
        prompt = f"""
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É live-—Å—Ç–∞–≤–æ–∫. {sport_rules}
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ –°–¢–†–û–ì–û –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ:
        
        {matches_text}
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–∞—Ç—á–∞ –¥–∞–π –î–ï–¢–ê–õ–¨–ù–û–ï –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—é—â–µ–µ:
        - –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞
        - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤/–ø–æ–∑–∏—Ü–∏–π
        - –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥/–∏–≥—Ä–æ–∫–æ–≤
        - –ò—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        - –ö–∞—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–∞/–ª–∏–≥–∏
        - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        
        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        [
            {{
                "team1": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã 1",
                "team2": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã 2", 
                "score": "–°—á–µ—Ç",
                "recommendation": "–ü1/–ü2/–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫",
                "confidence": 0.85,
                "reasoning": "–î–ï–¢–ê–õ–¨–ù–û–ï –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, —Ñ–æ—Ä–º—ã, –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å—Ç—Ä–µ—á, –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            }}
        ]
        
        –ï—Å–ª–∏ –ù–ï–¢ –º–∞—Ç—á–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–∞–≤–∏–ª–∞–º, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].
        """
        
        return prompt
    
    def _call_claude_via_cursor(self, prompt: str) -> str:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç Claude —á–µ—Ä–µ–∑ Cursor
        """
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Claude —á–µ—Ä–µ–∑ Cursor API
        self.logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        return self._fallback_heuristic_analysis(prompt)
    
    def _fallback_heuristic_analysis(self, prompt: str) -> str:
        """Fallback –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            matches_data = self._extract_matches_from_prompt(prompt)
            recommendations = []
            
            for match_data in matches_data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
                recommendation = self._analyze_match_heuristic(match_data)
                if recommendation:
                    recommendations.append(recommendation)
            
            return json.dumps(recommendations, ensure_ascii=False)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return "[]"
    
    def _extract_matches_from_prompt(self, prompt: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        matches = []
        lines = prompt.split('\n')
        current_match = {}
        
        for line in lines:
            line = line.strip()
            if line and line[0].isdigit() and 'vs' in line:
                # –ù–æ–≤—ã–π –º–∞—Ç—á: "1. –ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2"
                if current_match:
                    matches.append(current_match)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                match_line = line.split('.', 1)[1].strip()
                if ' vs ' in match_line:
                    team1, team2 = match_line.split(' vs ', 1)
                    current_match = {'team1': team1.strip(), 'team2': team2.strip()}
                    
            elif line.startswith('–°—á–µ—Ç:'):
                current_match['score'] = line.replace('–°—á–µ—Ç:', '').strip()
            elif line.startswith('–ú–∏–Ω—É—Ç–∞:'):
                current_match['minute'] = line.replace('–ú–∏–Ω—É—Ç–∞:', '').strip()
            elif line.startswith('–õ–∏–≥–∞:'):
                current_match['league'] = line.replace('–õ–∏–≥–∞:', '').strip()
        
        if current_match:
            matches.append(current_match)
            
        return matches
    
    def _analyze_match_heuristic(self, match_data: Dict) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            score = match_data.get('score', '')
            minute = match_data.get('minute', '0')
            league = match_data.get('league', '')
            
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
            if ':' not in score:
                return None
                
            home_score, away_score = map(int, score.split(':'))
            minute_int = int(minute.replace("'", "").replace("‚Ä≤", "")) if minute.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞
            if home_score == away_score:  # –ù–∏—á—å—è
                return None
                
            if minute_int < 45:  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É
            if home_score > away_score:
                leading_team = match_data['team1']
                recommendation = '–ü1'
                goal_difference = home_score - away_score
            else:
                leading_team = match_data['team2'] 
                recommendation = '–ü2'
                goal_difference = away_score - home_score
            
            # –û—Ü–µ–Ω–∫–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            is_favorite = self._is_favorite_heuristic(leading_team, league, goal_difference, minute_int)
            
            if not is_favorite:
                return None
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = self._calculate_confidence_heuristic(goal_difference, minute_int, league)
            
            if confidence < 0.85:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 85%
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            reasoning = self._generate_reasoning_heuristic(
                match_data, goal_difference, minute_int, confidence, leading_team
            )
            
            return {
                "team1": match_data['team1'],
                "team2": match_data['team2'],
                "score": score,
                "recommendation": recommendation,
                "confidence": confidence,
                "reasoning": reasoning
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞ {match_data}: {e}")
            return None
    
    def _is_favorite_heuristic(self, leading_team: str, league: str, goal_diff: int, minute: int) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞"""
        # –¢–æ–ø-–ª–∏–≥–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ)
        top_leagues = ['Premier League', 'La Liga', 'Serie A', 'Bundesliga', 'Ligue 1', 
                      'Champions League', 'Europa League']
        
        is_top_league = any(top_league.lower() in league.lower() for top_league in top_leagues)
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ–ø-–∫–æ–º–∞–Ω–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        top_teams = ['Manchester City', 'Arsenal', 'Liverpool', 'Chelsea', 'Manchester United',
                    'Barcelona', 'Real Madrid', 'Atletico Madrid', 'Bayern Munich', 'Borussia Dortmund',
                    'PSG', 'Milan', 'Inter', 'Juventus', 'Napoli']
        
        is_top_team = any(top_team.lower() in leading_team.lower() for top_team in top_teams)
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–≤–æ—Ä–∏—Ç–∞
        if goal_diff >= 2:  # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ 2+ –≥–æ–ª–∞ - –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç
            return True
            
        if goal_diff == 1:  # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ 1 –≥–æ–ª - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            factors = 0
            if is_top_team: factors += 1
            if is_top_league: factors += 1  
            if minute > 60: factors += 1
            
            return factors >= 2  # –ú–∏–Ω–∏–º—É–º 2 —Ñ–∞–∫—Ç–æ—Ä–∞ –∏–∑ 3
        
        return False
    
    def _calculate_confidence_heuristic(self, goal_diff: int, minute: int, league: str) -> float:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        base_confidence = 0.75
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑—Ä—ã–≤ –≤ —Å—á–µ—Ç–µ
        if goal_diff == 1:
            base_confidence += 0.05
        elif goal_diff == 2:
            base_confidence += 0.12
        elif goal_diff >= 3:
            base_confidence += 0.20
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
        if minute >= 70:
            base_confidence += 0.08
        elif minute >= 60:
            base_confidence += 0.05
        elif minute >= 45:
            base_confidence += 0.02
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ–ø-–ª–∏–≥—É
        top_leagues = ['Premier League', 'La Liga', 'Serie A', 'Bundesliga', 'Ligue 1']
        if any(top_league.lower() in league.lower() for top_league in top_leagues):
            base_confidence += 0.05
        
        return min(base_confidence, 0.95)  # –ú–∞–∫—Å–∏–º—É–º 95%
    
    def _generate_reasoning_heuristic(self, match_data: Dict, goal_diff: int, minute: int, 
                                    confidence: float, leading_team: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        reasoning_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–∞
        if goal_diff == 1:
            reasoning_parts.append(f"–ö–æ–º–∞–Ω–¥–∞ {leading_team} –≤–µ–¥–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º 1 –≥–æ–ª")
        elif goal_diff == 2:
            reasoning_parts.append(f"–ö–æ–º–∞–Ω–¥–∞ {leading_team} –∏–º–µ–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ 2 –≥–æ–ª–∞")
        else:
            reasoning_parts.append(f"–ö–æ–º–∞–Ω–¥–∞ {leading_team} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º –≤ {goal_diff} –≥–æ–ª–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        if minute >= 70:
            reasoning_parts.append(f"–ù–∞ {minute} –º–∏–Ω—É—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º")
        elif minute >= 60:
            reasoning_parts.append(f"–í—Ä–µ–º—è {minute}' –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            reasoning_parts.append(f"–° {minute} –º–∏–Ω—É—Ç—ã –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∏–≥–∏
        league = match_data.get('league', '')
        if league:
            reasoning_parts.append(f"–ú–∞—Ç—á –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ {league}, —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence_percent = int(confidence * 100)
        reasoning_parts.append(f"–û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {confidence_percent}%")
        
        return ". ".join(reasoning_parts) + "."
    
    def _process_claude_response(self, claude_response: str, original_matches: List[MatchData]) -> List[MatchData]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Claude –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Claude
            claude_recommendations = json.loads(claude_response)
            
            recommendations = []
            
            for claude_rec in claude_recommendations:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
                original_match = self._find_matching_match(claude_rec, original_matches)
                
                if original_match:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ Claude
                    recommendation = self._create_recommendation_from_claude(original_match, claude_rec)
                    recommendations.append(recommendation)
            
            return recommendations
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ Claude: {e}")
            return []
    
    def _find_matching_match(self, claude_rec: Dict[str, Any], original_matches: List[MatchData]) -> MatchData:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –ø–æ –¥–∞–Ω–Ω—ã–º –æ—Ç Claude"""
        for match in original_matches:
            if (match.team1 == claude_rec.get('team1') and 
                match.team2 == claude_rec.get('team2') and
                match.score == claude_rec.get('score')):
                return match
        return None
    
    def _create_recommendation_from_claude(self, original_match: MatchData, claude_rec: Dict[str, Any]) -> MatchData:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ Claude"""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Ç—á
        recommendation = MatchData(
            sport=original_match.sport_type,
            team1=original_match.team1,
            team2=original_match.team2,
            score=original_match.score
        )
        recommendation.minute = original_match.minute
        recommendation.sport_type = original_match.sport_type
        recommendation.league = original_match.league
        recommendation.url = original_match.url
        recommendation.source = original_match.source
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Claude
        recommendation.probability = claude_rec.get('confidence', 0) * 100
        recommendation.recommendation_type = 'win'
        recommendation.recommendation_value = claude_rec.get('recommendation', '')
        recommendation.justification = claude_rec.get('reasoning', '')
        
        return recommendation