#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
"""

from datetime import datetime, timezone, timedelta
import logging

logger = logging.getLogger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(MOSCOW_TZ)

def format_moscow_time_for_telegram() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è Telegram –æ—Ç—á–µ—Ç–æ–≤"""
    moscow_time = get_moscow_time()
    return moscow_time.strftime("%H:%M –ú–°–ö, %d.%m.%Y")

def format_moscow_time_for_logs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤"""
    moscow_time = get_moscow_time()
    return moscow_time.strftime("%Y-%m-%d %H:%M:%S –ú–°–ö")

def format_moscow_time_for_filename() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    moscow_time = get_moscow_time()
    return moscow_time.strftime("%Y%m%d_%H%M%S")

def is_match_still_live(match_minute: str, max_duration_minutes: int = 90) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –µ—â–µ –º–∞—Ç—á (–Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏)
    
    Args:
        match_minute: –ú–∏–Ω—É—Ç–∞ –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "67'", "75‚Ä≤")
        max_duration_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–∞—Ç—á –µ—â–µ –∏–¥–µ—Ç, False –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –º–∏–Ω—É—Ç—ã
        minute_clean = match_minute.replace("'", "").replace("‚Ä≤", "").replace("'", "")
        if not minute_clean.isdigit():
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–¥–µ—Ç
        
        minute = int(minute_clean)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if minute > max_duration_minutes + 5:  # +5 –º–∏–Ω—É—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            logger.warning(f"üèÅ –ú–∞—Ç—á –Ω–∞ {minute} –º–∏–Ω—É—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω (–º–∞–∫—Å: {max_duration_minutes}+5)")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞: {e}")
        return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –º–∞—Ç—á –∏–¥–µ—Ç

def filter_live_matches_by_time(matches, sport_type: str = 'football'):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Ç—á–∏, –∏—Å–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è
    
    Args:
        matches: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
        sport_type: –¢–∏–ø —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
    """
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
    max_durations = {
        'football': 90,      # 90 –º–∏–Ω—É—Ç + –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        'tennis': 999,       # –¢–µ–Ω–Ω–∏—Å –º–æ–∂–µ—Ç –¥–ª–∏—Ç—å—Å—è –æ—á–µ–Ω—å –¥–æ–ª–≥–æ
        'table_tennis': 999, # –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å —Ç–æ–∂–µ
        'handball': 60       # 60 –º–∏–Ω—É—Ç + –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    }
    
    max_duration = max_durations.get(sport_type, 90)
    active_matches = []
    
    for match in matches:
        minute_str = getattr(match, 'minute', '0')
        
        if is_match_still_live(minute_str, max_duration):
            active_matches.append(match)
        else:
            logger.info(f"üèÅ –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è –º–∞—Ç—á: {match.team1} vs {match.team2} ({minute_str})")
    
    if len(active_matches) < len(matches):
        logger.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(matches) - len(active_matches)} –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –º–∞—Ç—á–µ–π")
    
    return active_matches

def log_moscow_time(message: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    moscow_time_str = format_moscow_time_for_logs()
    logger.info(f"[{moscow_time_str}] {message}")

def get_time_until_next_analysis(interval_minutes: int = 45) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        moscow_time = get_moscow_time()
        current_minute = moscow_time.minute
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        minutes_until_next = interval_minutes - (current_minute % interval_minutes)
        if minutes_until_next == interval_minutes:
            minutes_until_next = 0
        
        next_analysis_time = moscow_time + timedelta(minutes=minutes_until_next)
        return next_analysis_time.strftime("%H:%M –ú–°–ö")
        
    except Exception:
        return "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"