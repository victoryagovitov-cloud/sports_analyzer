#!/usr/bin/env python3
"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–æ—Ç–∞–ª–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ
"""

import math
import logging
from typing import Dict, Optional
from multi_source_controller import MatchData

logger = logging.getLogger(__name__)

class TotalsCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞ –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def calculate_handball_totals(self, match: MatchData) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞ –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
        –§–æ—Ä–º—É–ª–∞: –û–ö–†–£–ì–õ–í–í–ï–†–•((–ì–æ–ª—ã1 + –ì–æ–ª—ã2) / (30 + –ú–∏–Ω—É—Ç–∞_–í—Ç–æ—Ä–æ–π_–ü–æ–ª–æ–≤–∏–Ω—ã) * 60)
        """
        try:
            if ':' not in match.score:
                return {}
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            total_goals = home_score + away_score
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (>30 –º–∏–Ω)
            if minute <= 30:
                self.logger.info(f"–ú–∞—Ç—á {match.team1} vs {match.team2}: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ç–∞–ª–æ–≤ ({minute} –º–∏–Ω)")
                return {}
            
            # –†–∞—Å—á–µ—Ç –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
            second_half_minute = minute - 30  # –ú–∏–Ω—É—Ç—ã –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
            predicted_total_float = (total_goals / (30 + second_half_minute)) * 60
            predicted_total = math.ceil(predicted_total_float)  # –û–ö–†–£–ì–õ–í–í–ï–†–•
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if total_goals > minute:
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø: –≥–æ–ª—ã –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç
                recommendation_value = predicted_total - 4
                recommendation = f"–¢–ë {recommendation_value}"
                tempo = "–ë–´–°–¢–†–´–ô"
                reasoning = f"–ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø –∏–≥—Ä—ã: {total_goals} –≥–æ–ª–æ–≤ –∑–∞ {minute} –º–∏–Ω—É—Ç"
            else:
                # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø: –≥–æ–ª—ã –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç
                recommendation_value = predicted_total + 3
                recommendation = f"–¢–ú {recommendation_value}"
                tempo = "–ú–ï–î–õ–ï–ù–ù–´–ô"
                reasoning = f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø –∏–≥—Ä—ã: {total_goals} –≥–æ–ª–æ–≤ –∑–∞ {minute} –º–∏–Ω—É—Ç"
            
            result = {
                'match': f"{match.team1} vs {match.team2}",
                'current_score': match.score,
                'minute': minute,
                'total_goals': total_goals,
                'second_half_minute': second_half_minute,
                'predicted_total': predicted_total,
                'predicted_total_float': predicted_total_float,
                'recommendation': recommendation,
                'recommendation_value': recommendation_value,
                'tempo': tempo,
                'reasoning': reasoning,
                'goals_per_minute': total_goals / minute if minute > 0 else 0
            }
            
            self.logger.info(f"üìä –¢–æ—Ç–∞–ª –¥–ª—è {match.team1} vs {match.team2}: {recommendation} (—Ç–µ–º–ø: {tempo})")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è {match.team1} vs {match.team2}: {e}")
            return {}
    
    def create_totals_recommendation(self, match: MatchData, totals_data: Dict) -> Optional[MatchData]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–æ—Ç–∞–ª–∞–º"""
        if not totals_data:
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–æ—Ç–∞–ª–∞–º
            recommendation = MatchData(
                sport='handball',
                team1=match.team1,
                team2=match.team2,
                score=match.score,
                minute=getattr(match, 'minute', ''),
                league=getattr(match, 'league', ''),
                link=getattr(match, 'link', ''),
                source=getattr(match, 'source', 'totals_calculator')
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation.recommendation_type = 'total'
            recommendation.recommendation_value = totals_data['recommendation']
            recommendation.probability = self._calculate_totals_confidence(totals_data)
            recommendation.justification = self._generate_totals_reasoning(totals_data)
            
            return recommendation
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ç–∞–ª–∞–º: {e}")
            return None
    
    def _calculate_totals_confidence(self, totals_data: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ç–∞–ª–∞–º"""
        try:
            goals_per_minute = totals_data.get('goals_per_minute', 0)
            minute = totals_data.get('minute', 0)
            tempo = totals_data.get('tempo', '–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô')
            
            base_confidence = 75.0  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # –ë–æ–Ω—É—Å –∑–∞ —á–µ—Ç–∫–∏–π —Ç–µ–º–ø
            if tempo == "–ë–´–°–¢–†–´–ô" and goals_per_minute > 1.2:
                base_confidence += 10
            elif tempo == "–ú–ï–î–õ–ï–ù–ù–´–ô" and goals_per_minute < 0.8:
                base_confidence += 10
            
            # –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (—á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –Ω–∞–¥–µ–∂–Ω–µ–µ)
            if minute > 50:
                base_confidence += 5
            elif minute > 40:
                base_confidence += 3
            
            # –ë–æ–Ω—É—Å –∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if goals_per_minute > 1.5 or goals_per_minute < 0.6:
                base_confidence += 5
            
            return min(base_confidence, 95.0)
            
        except Exception:
            return 75.0
    
    def _generate_totals_reasoning(self, totals_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ç–∞–ª–∞–º"""
        try:
            match = totals_data.get('match', '')
            score = totals_data.get('current_score', '')
            minute = totals_data.get('minute', 0)
            total_goals = totals_data.get('total_goals', 0)
            tempo = totals_data.get('tempo', '')
            predicted_total = totals_data.get('predicted_total', 0)
            recommendation = totals_data.get('recommendation', '')
            
            reasoning = f"–í –º–∞—Ç—á–µ {match} –∑–∞–±–∏—Ç–æ {total_goals} –≥–æ–ª–æ–≤ –∑–∞ {minute} –º–∏–Ω—É—Ç. "
            reasoning += f"{tempo} —Ç–µ–º–ø –∏–≥—Ä—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ç–æ—Ç–∞–ª {predicted_total}. "
            reasoning += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–≤–∫–∞ {recommendation} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏."
            
            return reasoning
            
        except Exception as e:
            return f"–†–∞—Å—á–µ—Ç —Ç–æ—Ç–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–º–ø–∞ –∏–≥—Ä—ã: {totals_data.get('reasoning', '')}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
totals_calculator = TotalsCalculator()