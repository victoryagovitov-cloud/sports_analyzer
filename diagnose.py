#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import time
import requests
import psutil
from datetime import datetime

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_modules = {
        'requests': 'requests',
        'beautifulsoup4': 'bs4',
        'fuzzywuzzy': 'fuzzywuzzy',
        'schedule': 'schedule',
        'psutil': 'psutil'
    }
    
    all_ok = True
    for package_name, import_name in required_modules.items():
        try:
            __import__(import_name)
            print(f"  ‚úÖ {package_name}")
        except ImportError:
            print(f"  ‚ùå {package_name} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            all_ok = False
    
    return all_ok

def check_system_resources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\nüíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    # –ü–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    print(f"  üìä –ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, {memory.available / (1024*1024*1024):.1f} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ")
    
    # CPU
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"  üñ•Ô∏è  CPU: {cpu_percent}% –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –î–∏—Å–∫
    disk = psutil.disk_usage('/')
    disk_percent = (disk.used / disk.total) * 100
    print(f"  üíæ –î–∏—Å–∫: {disk_percent:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, {disk.free / (1024*1024*1024):.1f} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    issues = []
    if memory.percent > 80:
        issues.append(f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
    if cpu_percent > 90:
        issues.append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
    if disk_percent > 90:
        issues.append(f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent:.1f}%")
    
    if issues:
        print("  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for issue in issues:
            print(f"    - {issue}")
    else:
        print("  ‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –Ω–æ—Ä–º–µ")

def check_network():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    urls_to_check = [
        ('Betzona —Ñ—É—Ç–±–æ–ª', 'https://betzona.ru/live-futbol.html'),
        ('Scores24 —Ñ—É—Ç–±–æ–ª', 'https://scores24.live/ru/soccer?matchesFilter=live'),
        ('Telegram API', 'https://api.telegram.org'),
    ]
    
    for name, url in urls_to_check:
        try:
            start_time = time.time()
            response = requests.get(url, timeout=10, headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            })
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                print(f"  ‚úÖ {name}: {response.status_code} ({response_time:.2f}—Å)")
            else:
                print(f"  ‚ö†Ô∏è  {name}: {response.status_code} ({response_time:.2f}—Å)")
                
        except requests.exceptions.Timeout:
            print(f"  ‚ùå {name}: –¢–ê–ô–ú–ê–£–¢ (>10—Å)")
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {name}: –û–®–ò–ë–ö–ê - {e}")

def check_telegram():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from telegram_integration import TelegramIntegration
        
        telegram = TelegramIntegration()
        if telegram.test_connection():
            print("  ‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("  ‚ùå Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import ANALYSIS_SETTINGS
        
        important_settings = [
            'http_timeout_seconds',
            'analysis_timeout_seconds',
            'max_retries',
            'max_memory_usage_percent'
        ]
        
        for setting in important_settings:
            if setting in ANALYSIS_SETTINGS:
                value = ANALYSIS_SETTINGS[setting]
                print(f"  ‚úÖ {setting}: {value}")
            else:
                print(f"  ‚ùå {setting}: –ù–ï –ù–ê–ô–î–ï–ù–û")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        print("  üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        import subprocess
        
        result = subprocess.run([
            'timeout', '30', 'python3', 'start_improved.py', 'single'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"  ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"    –û—à–∏–±–∫–∏: {result.stderr[:200]}...")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ TRUELIVEBET AI")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    deps_ok = check_dependencies()
    check_system_resources()
    check_network()
    check_telegram()
    check_config()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        run_quick_test()
    
    print("\n" + "=" * 50)
    if deps_ok:
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python3 start_improved.py single    # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("  python3 start_improved.py continuous # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
    else:
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("  pip3 install --break-system-packages -r requirements.txt")

if __name__ == "__main__":
    main()