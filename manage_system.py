#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π TrueLiveBet AI
"""

import os
import sys
import subprocess
import signal
import psutil
import time
from datetime import datetime

def find_system_processes():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–∏—Å—Ç–µ–º—ã TrueLiveBet AI"""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline'] or [])
            if 'start_production.py' in cmdline and 'continuous' in cmdline:
                processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

def start_system():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ TRUELIVEBET AI")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
    processes = find_system_processes()
    if processes:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ ({len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
        for proc in processes:
            print(f"  PID: {proc.pid}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        cmd = ["python3", "start_production.py", "continuous"]
        process = subprocess.Popen(cmd, stdout=open('production.log', 'w'), stderr=subprocess.STDOUT)
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å PID: {process.pid}")
        print("üìã –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ production.log")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def stop_system():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
    print("üõë –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ TRUELIVEBET AI")
    print("=" * 40)
    
    processes = find_system_processes()
    if not processes:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return False
    
    stopped_count = 0
    for proc in processes:
        try:
            proc.terminate()
            proc.wait(timeout=5)
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            stopped_count += 1
        except psutil.TimeoutExpired:
            try:
                proc.kill()
                print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                stopped_count += 1
            except psutil.NoSuchProcess:
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                stopped_count += 1
        except psutil.NoSuchProcess:
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            stopped_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")
    
    print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    return stopped_count > 0

def restart_system():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
    print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ TRUELIVEBET AI")
    print("=" * 40)
    
    if stop_system():
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)
    
    return start_system()

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ TRUELIVEBET AI")
    print("=" * 40)
    
    processes = find_system_processes()
    if processes:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ ({len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
        for proc in processes:
            try:
                uptime = time.time() - proc.create_time()
                uptime_str = f"{int(uptime//3600)}—á {int((uptime%3600)//60)}–º {int(uptime%60)}—Å"
                print(f"  PID: {proc.pid} | Uptime: {uptime_str}")
            except:
                print(f"  PID: {proc.pid}")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    if os.path.exists('production.log'):
        try:
            with open('production.log', 'r') as f:
                lines = f.readlines()
                if lines:
                    last_line = lines[-1].strip()
                    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ:")
                    print(f"  {last_line}")
        except:
            pass

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüéõÔ∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô TRUELIVEBET AI")
    print("=" * 40)
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
    print("5. –í—ã—Ö–æ–¥")
    print("=" * 40)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        if command == 'start':
            start_system()
        elif command == 'stop':
            stop_system()
        elif command == 'restart':
            restart_system()
        elif command == 'status':
            show_status()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start, stop, restart, status")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            show_menu()
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
                if choice == '1':
                    start_system()
                elif choice == '2':
                    stop_system()
                elif choice == '3':
                    restart_system()
                elif choice == '4':
                    show_status()
                elif choice == '5':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()