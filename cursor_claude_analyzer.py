#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude 3.5 Sonnet —á–µ—Ä–µ–∑ Cursor - –ë–ï–°–ü–õ–ê–¢–ù–´–ô –∞–Ω–∞–ª–∏–∑!
"""

import json
import logging
import time
import hashlib
from typing import List, Dict, Any, Optional
from multi_source_controller import MatchData
from config import ANALYSIS_SETTINGS

logger = logging.getLogger(__name__)

class CursorClaudeAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ Claude 3.5 Sonnet –≤ Cursor - –ë–ï–°–ü–õ–ê–¢–ù–û!
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –ö—ç—à –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.analysis_cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.total_analyses = 0
        self.cache_hits = 0
        
    def analyze_matches_with_cursor_claude(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ Claude 3.5 Sonnet –≤ Cursor - –ë–ï–°–ü–õ–ê–¢–ù–û!
        """
        if not matches:
            return []
        
        self.logger.info(f"üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ô Claude –∞–Ω–∞–ª–∏–∑ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
        
        # –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–∞—Ç—á–∏
        filtered_matches = self._prefilter_for_claude(matches, sport_type)
        self.logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_matches)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π")
        
        if not filtered_matches:
            return []
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        for match in filtered_matches[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∞—Ç—á–∞
            try:
                recommendation = self._analyze_single_match_with_claude(match, sport_type)
                if recommendation:
                    recommendations.append(recommendation)
                    self.total_analyses += 1
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ Claude –∞–Ω–∞–ª–∏–∑–∞ {match.team1} vs {match.team2}: {e}")
                continue
        
        self.logger.info(f"üÜì Claude —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ë–ï–°–ü–õ–ê–¢–ù–û!)")
        return recommendations
    
    def _prefilter_for_claude(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """–ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è Claude –∞–Ω–∞–ª–∏–∑–∞"""
        filtered = []
        
        for match in matches:
            if sport_type == 'football':
                if self._is_football_worth_claude_analysis(match):
                    filtered.append(match)
            elif sport_type == 'tennis':
                if self._is_tennis_worth_claude_analysis(match):
                    filtered.append(match)
            elif sport_type == 'handball':
                if self._is_handball_worth_claude_analysis(match):
                    filtered.append(match)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Ç–æ–ø-–ª–∏–≥–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
        return self._sort_by_priority(filtered, sport_type)
    
    def _is_football_worth_claude_analysis(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–æ–∏—Ç –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á —á–µ—Ä–µ–∑ Claude"""
        try:
            if ':' not in match.score:
                return False
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            league = getattr(match, 'league', '')
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
            if home_score == away_score:  # –ù–∏—á—å—è
                return False
            if minute < 25 or minute > 75:  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ 25-75 –º–∏–Ω—É—Ç–∞
                return False
            
            goal_diff = abs(home_score - away_score)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ø-–ª–∏–≥–∞–º –∏ –±–æ–ª—å—à–æ–º—É —Ä–∞–∑—Ä—ã–≤—É
            top_leagues = ['Premier League', 'La Liga', 'Serie A', 'Bundesliga', 'Ligue 1', 'Champions League', 'Europa League']
            is_top_league = any(league_name.lower() in league.lower() for league_name in top_leagues)
            
            return goal_diff >= 1 and (is_top_league or goal_diff >= 2)
            
        except Exception:
            return False
    
    def _is_tennis_worth_claude_analysis(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            score = match.score
            league = getattr(match, 'league', '')
            
            # –¢–æ–ª—å–∫–æ —Ç–æ–ø —Ç—É—Ä–Ω–∏—Ä—ã
            top_tournaments = ['Grand Slam', 'ATP Masters', 'WTA 1000', 'ATP 500', 'WTA 500']
            is_top_tournament = any(tournament.lower() in league.lower() for tournament in top_tournaments)
            
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º –∏–ª–∏ –≤ –ø–µ—Ä–≤–æ–º —Å–µ—Ç–µ
            if '-' in score:
                if score.count('-') == 1:
                    sets1, sets2 = map(int, score.split('-'))
                    return sets1 != sets2 and is_top_tournament
            
            return False
        except Exception:
            return False
    
    def _is_handball_worth_claude_analysis(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            if ':' not in match.score:
                return False
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            goal_diff = abs(home_score - away_score)
            
            # –†–∞–∑—Ä—ã–≤ ‚â•4 –≥–æ–ª–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
            return goal_diff >= 4 and minute > 30
            
        except Exception:
            return False
    
    def _sort_by_priority(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        def get_priority_score(match):
            score = 0
            league = getattr(match, 'league', '').lower()
            
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ø-–ª–∏–≥–∞–º
            if sport_type == 'football':
                top_leagues = ['premier league', 'champions league', 'la liga', 'serie a', 'bundesliga']
                for i, top_league in enumerate(top_leagues):
                    if top_league in league:
                        score += 10 - i  # Champions League = 10, Bundesliga = 6
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–æ–º—É —Ä–∞–∑—Ä—ã–≤—É –≤ —Å—á–µ—Ç–µ
            try:
                if ':' in match.score:
                    home, away = map(int, match.score.split(':'))
                    score += abs(home - away) * 3
            except Exception:
                pass
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            try:
                minute_str = getattr(match, 'minute', '0')
                minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
                if 55 <= minute <= 70:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    score += 5
            except Exception:
                pass
            
            return score
        
        return sorted(matches, key=get_priority_score, reverse=True)
    
    def _analyze_single_match_with_claude(self, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞ —á–µ—Ä–µ–∑ Claude –≤ Cursor"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._create_cache_key(match, sport_type)
            if cache_key in self.analysis_cache:
                cached_result = self.analysis_cache[cache_key]
                if time.time() - cached_result['timestamp'] < self.cache_ttl:
                    self.logger.info(f"üíæ –ö—ç—à: {match.team1} vs {match.team2}")
                    self.cache_hits += 1
                    return cached_result['recommendation']
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            claude_prompt = self._create_claude_prompt(match, sport_type)
            
            # –ó–î–ï–°–¨ –ë–£–î–ï–¢ –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó CLAUDE –í CURSOR
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é Claude –∞–Ω–∞–ª–∏–∑–∞
            claude_response = self._simulate_claude_analysis(match, sport_type)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            recommendation = self._process_claude_response(claude_response, match, sport_type)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if recommendation:
                self.analysis_cache[cache_key] = {
                    'recommendation': recommendation,
                    'timestamp': time.time()
                }
            
            return recommendation
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Claude –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _create_claude_prompt(self, match: MatchData, sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude"""
        
        base_info = f"–ú–∞—Ç—á: {match.team1} vs {match.team2}\n–°—á–µ—Ç: {match.score}\n–ú–∏–Ω—É—Ç–∞: {match.minute}\n–õ–∏–≥–∞: {match.league}"
        
        if sport_type == 'football':
            return f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.

{base_info}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
- –í—Ä–µ–º—è: 25-75 –º–∏–Ω—É—Ç–∞ ‚úì
- –§–∞–≤–æ—Ä–∏—Ç–∏–∑–º: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚â•5 –º–µ—Å—Ç, —Ñ–æ—Ä–º–∞ 3+ –ø–æ–±–µ–¥ –∏–∑ 5
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ‚â§2.20

–û—Ç–≤–µ—Ç—å JSON: {{"recommendation": "–ü1/–ü2/–ù–ï–¢", "confidence": 0.85, "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}"""
        
        elif sport_type == 'tennis':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º.

{base_info}

–ö—Ä–∏—Ç–µ—Ä–∏–∏: –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º, —Ä–µ–π—Ç–∏–Ω–≥ +20, —Ñ–æ—Ä–º–∞ 4/5, –∫–æ—ç—Ñ ‚â§1.70

JSON: {{"recommendation": "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞/–ù–ï–¢", "confidence": 0.80, "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}"""
        
        elif sport_type == 'handball':
            return f"""–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –≥–∞–Ω–¥–±–æ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.

{base_info}

–ö—Ä–∏—Ç–µ—Ä–∏–∏: —Ä–∞–∑—Ä—ã–≤ ‚â•4 –≥–æ–ª–æ–≤, –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞, —Ç–∞–±–ª–∏—Ü–∞ +5 –º–µ—Å—Ç, –∫–æ—ç—Ñ ‚â§1.45

JSON: {{"recommendation": "–ü1/–ü2/–ù–ï–¢", "confidence": 0.85, "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}"""
        
        return f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á: {base_info}"
    
    def _simulate_claude_analysis(self, match: MatchData, sport_type: str) -> str:
        """
        –í–†–ï–ú–ï–ù–ù–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø Claude –∞–Ω–∞–ª–∏–∑–∞
        –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Claude –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Cursor
        """
        # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Claude
        
        if sport_type == 'football':
            return self._simulate_football_claude(match)
        elif sport_type == 'tennis':
            return self._simulate_tennis_claude(match)
        elif sport_type == 'handball':
            return self._simulate_handball_claude(match)
        
        return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞"}'
    
    def _simulate_football_claude(self, match: MatchData) -> str:
        """–ò–º–∏—Ç–∞—Ü–∏—è Claude –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É—Ç–±–æ–ª–∞"""
        try:
            if ':' not in match.score:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—á–µ—Ç"}'
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            league = getattr(match, 'league', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            if home_score == away_score:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç"}'
            
            if minute < 25 or minute > 75:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞"}'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É
            if home_score > away_score:
                leading_team = match.team1
                recommendation = "–ü1"
                goal_diff = home_score - away_score
            else:
                leading_team = match.team2
                recommendation = "–ü2"
                goal_diff = away_score - home_score
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞ (–∏–º–∏—Ç–∞—Ü–∏—è Claude –ª–æ–≥–∏–∫–∏)
            top_leagues = ['Premier League', 'La Liga', 'Serie A', 'Bundesliga', 'Champions League']
            is_top_league = any(league_name.lower() in league.lower() for league_name in top_leagues)
            
            top_teams = ['Manchester City', 'Arsenal', 'Liverpool', 'Chelsea', 'Manchester United',
                        'Barcelona', 'Real Madrid', 'Atletico Madrid', 'Bayern Munich', 'Borussia Dortmund',
                        'PSG', 'Milan', 'Inter', 'Juventus', 'Napoli']
            is_top_team = any(team.lower() in leading_team.lower() for team in top_teams)
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è Claude –ª–æ–≥–∏–∫–∏)
            confidence = 0.75
            
            # –§–∞–∫—Ç–æ—Ä—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if goal_diff >= 2:
                confidence += 0.10
            if is_top_team:
                confidence += 0.08
            if is_top_league:
                confidence += 0.05
            if 55 <= minute <= 70:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                confidence += 0.07
            
            confidence = min(confidence, 0.95)
            
            if confidence < 0.80:
                return '{"recommendation": "–ù–ï–¢", "confidence": ' + str(confidence) + ', "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"}'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Claude
            reason = f"{leading_team} –≤–µ–¥–µ—Ç {goal_diff} –≥–æ–ª(–∞) –Ω–∞ {minute} –º–∏–Ω—É—Ç–µ. "
            
            if is_top_team:
                reason += f"{leading_team} - —Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–ª–∞—Å—Å–æ–º –∏–≥—Ä–æ–∫–æ–≤. "
            if is_top_league:
                reason += f"–ú–∞—Ç—á –≤ {league} - –Ω–∞–¥–µ–∂–Ω–∞—è –ª–∏–≥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. "
            if minute >= 60:
                reason += f"–ù–∞ {minute} –º–∏–Ω—É—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º."
            
            return json.dumps({
                "recommendation": recommendation,
                "confidence": confidence,
                "reason": reason
            }, ensure_ascii=False)
            
        except Exception as e:
            return f'{{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}}'
    
    def _simulate_tennis_claude(self, match: MatchData) -> str:
        """–ò–º–∏—Ç–∞—Ü–∏—è Claude –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–Ω–∏—Å–∞"""
        try:
            score = match.score
            league = getattr(match, 'league', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º
            if '-' not in score:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ—è—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞"}'
            
            # –¢–æ–ª—å–∫–æ —Ç–æ–ø —Ç—É—Ä–Ω–∏—Ä—ã
            top_tournaments = ['Grand Slam', 'ATP Masters', 'WTA 1000', 'ATP 500', 'WTA 500']
            is_top_tournament = any(tournament.lower() in league.lower() for tournament in top_tournaments)
            
            if not is_top_tournament:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ —Ç–æ–ø —Ç—É—Ä–Ω–∏—Ä"}'
            
            if score.count('-') == 1:
                sets1, sets2 = map(int, score.split('-'))
                if sets1 > sets2:
                    recommendation = f"–ü–æ–±–µ–¥–∞ {match.team1}"
                    leading_player = match.team1
                elif sets2 > sets1:
                    recommendation = f"–ü–æ–±–µ–¥–∞ {match.team2}"
                    leading_player = match.team2
                else:
                    return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–†–∞–≤–Ω—ã–π —Å—á–µ—Ç –ø–æ —Å–µ—Ç–∞–º"}'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ–¥—É—â–∏–π –∏–≥—Ä–æ–∫ —Ç–æ–ø–æ–º
                top_players = ['–î–∂–æ–∫–æ–≤–∏—á', '–ù–∞–¥–∞–ª—å', '–§–µ–¥–µ—Ä–µ—Ä', '–ú–µ–¥–≤–µ–¥–µ–≤', '–¶–∏—Ü–∏–ø–∞—Å', '–†—É–±–ª–µ–≤']
                is_top_player = any(player.lower() in leading_player.lower() for player in top_players)
                
                confidence = 0.78 + (0.08 if is_top_player else 0) + (0.05 if 'Grand Slam' in league else 0)
                
                if confidence >= 0.80:
                    reason = f"{leading_player} –≤–µ–¥–µ—Ç –ø–æ —Å–µ—Ç–∞–º –≤ {league}. "
                    if is_top_player:
                        reason += "–¢–æ–ø-–∏–≥—Ä–æ–∫ —Å –≤—ã—Å–æ–∫–∏–º –∫–ª–∞—Å—Å–æ–º. "
                    reason += "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –≤ —Ç–µ–Ω–Ω–∏—Å–µ."
                    
                    return json.dumps({
                        "recommendation": recommendation,
                        "confidence": confidence,
                        "reason": reason
                    }, ensure_ascii=False)
            
            return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º"}'
            
        except Exception as e:
            return f'{{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–û—à–∏–±–∫–∞: {str(e)}"}}'
    
    def _simulate_handball_claude(self, match: MatchData) -> str:
        """–ò–º–∏—Ç–∞—Ü–∏—è Claude –∞–Ω–∞–ª–∏–∑–∞ –≥–∞–Ω–¥–±–æ–ª–∞"""
        try:
            if ':' not in match.score:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—á–µ—Ç"}'
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            goal_diff = abs(home_score - away_score)
            
            if goal_diff < 4:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ –≤ —Å—á–µ—Ç–µ"}'
            
            if minute <= 30:
                return '{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Ç–∞–π–º–µ"}'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É
            if home_score > away_score:
                leading_team = match.team1
                recommendation = "–ü1"
            else:
                leading_team = match.team2
                recommendation = "–ü2"
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = 0.80 + (goal_diff - 4) * 0.02 + (minute - 30) * 0.001
            confidence = min(confidence, 0.95)
            
            reason = f"{leading_team} –≤–µ–¥–µ—Ç {goal_diff} –≥–æ–ª–æ–≤ –Ω–∞ {minute} –º–∏–Ω—É—Ç–µ. –ë–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–±–µ–¥—É."
            
            return json.dumps({
                "recommendation": recommendation,
                "confidence": confidence,
                "reason": reason
            }, ensure_ascii=False)
            
        except Exception as e:
            return f'{{"recommendation": "–ù–ï–¢", "confidence": 0.0, "reason": "–û—à–∏–±–∫–∞: {str(e)}"}}'
    
    def _process_claude_response(self, claude_response: str, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Claude"""
        try:
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            analysis = json.loads(claude_response)
            
            recommendation_value = analysis.get('recommendation', '–ù–ï–¢')
            if recommendation_value == '–ù–ï–¢':
                return None
            
            confidence = analysis.get('confidence', 0)
            if confidence < 0.80:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = MatchData(
                sport=sport_type,
                team1=match.team1,
                team2=match.team2,
                score=match.score,
                minute=getattr(match, 'minute', ''),
                league=getattr(match, 'league', ''),
                link=getattr(match, 'link', ''),
                source='cursor_claude_free'
            )
            
            recommendation.probability = confidence * 100
            recommendation.recommendation_type = 'win'
            recommendation.recommendation_value = recommendation_value
            recommendation.justification = analysis.get('reason', 'Claude –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Cursor')
            
            return recommendation
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Claude –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def _create_cache_key(self, match: MatchData, sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞"""
        key_string = f"{sport_type}_{match.team1}_{match.team2}_{match.score}_{match.minute}"
        return hashlib.md5(key_string.encode()).hexdigest()
    
    def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            'total_analyses': self.total_analyses,
            'cache_hits': self.cache_hits,
            'cache_hit_rate': f"{(self.cache_hits / max(self.total_analyses, 1) * 100):.1f}%",
            'estimated_cost_savings': f"${self.cache_hits * 0.30:.2f}",
            'cache_size': len(self.analysis_cache)
        }
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Claude —á–µ—Ä–µ–∑ Cursor"""
        try:
            test_match = MatchData(
                sport='football',
                team1='Test Team 1',
                team2='Test Team 2', 
                score='1:0',
                minute='60',
                league='Test League',
                link='test'
            )
            
            result = self._analyze_single_match_with_claude(test_match, 'football')
            if result:
                self.logger.info("‚úÖ Claude —á–µ—Ä–µ–∑ Cursor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–ë–ï–°–ü–õ–ê–¢–ù–û!)")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è  Claude –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Claude: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
cursor_claude_analyzer = CursorClaudeAnalyzer()