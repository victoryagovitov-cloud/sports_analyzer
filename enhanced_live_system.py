#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ live-–∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–≤–æ–∫ —Å –º—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
"""

import logging
import schedule
import time
from datetime import datetime
from typing import List
from multi_source_controller import MultiSourceController, MatchData
from scores24_only_controller import scores24_only_controller
from enhanced_analyzers import (
    EnhancedFootballAnalyzer,
    EnhancedTennisAnalyzer,
    EnhancedTableTennisAnalyzer,
    EnhancedHandballAnalyzer
)
from simple_report_generator import SimpleReportGenerator
from ai_analyzer import AIAnalyzer
from claude_final_integration import ClaudeFinalIntegration
from ai_telegram_generator import AITelegramGenerator
from telegram_integration import TelegramIntegration
from system_watchdog import system_watchdog
from enhanced_telegram_formatter import enhanced_formatter
from prompt_telegram_formatter import prompt_telegram_formatter
from totals_calculator import totals_calculator
from moscow_time import filter_live_matches_by_time, log_moscow_time, format_moscow_time_for_filename

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('live_analysis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class EnhancedLiveSystem:
    def __init__(self):
        self.controller = MultiSourceController()
        self.analyzers = {
            'football': EnhancedFootballAnalyzer(),
            'tennis': EnhancedTennisAnalyzer(),
            'table_tennis': EnhancedTableTennisAnalyzer(),
            'handball': EnhancedHandballAnalyzer()
        }
        self.report_generator = SimpleReportGenerator()
        self.ai_analyzer = AIAnalyzer()
        self.claude_analyzer = ClaudeFinalIntegration()
        self.ai_telegram_generator = AITelegramGenerator()
        self.telegram_integration = TelegramIntegration()
        
    def analyze_sport(self, sport_type: str) -> List[MatchData]:
        """AI-–∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ {sport_type}...")
        
        # –ü–æ–ª—É—á–∞–µ–º live-–º–∞—Ç—á–∏ –¢–û–õ–¨–ö–û —Å scores24.live (–ø–æ –ø—Ä–æ–º–ø—Ç—É)
        matches = scores24_only_controller.get_live_matches(sport_type)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} live-–º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –º–∞—Ç—á–∏
        active_matches = filter_live_matches_by_time(matches, sport_type)
        
        if len(active_matches) < len(matches):
            logger.info(f"üìä –ò—Å–∫–ª—é—á–µ–Ω–æ {len(matches) - len(active_matches)} –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
        
        if not active_matches:
            logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö live-–º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
            return []
        
        # AI-–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
        try:
            ai_recommendations = self.claude_analyzer.analyze_matches_with_claude(active_matches, sport_type)
            logger.info(f"AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(ai_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {sport_type}")
            return ai_recommendations
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {sport_type}: {e}")
            return []
    
    def _analyze_handball_totals(self, handball_matches: List[MatchData]) -> List[MatchData]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ç–∞–ª—ã –¥–ª—è –≥–∞–Ω–¥–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
        totals_recommendations = []
        
        for match in handball_matches:
            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—Ç–∞–ª—ã –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
                totals_data = totals_calculator.calculate_handball_totals(match)
                
                if totals_data:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–æ—Ç–∞–ª–∞–º
                    totals_rec = totals_calculator.create_totals_recommendation(match, totals_data)
                    if totals_rec:
                        totals_recommendations.append(totals_rec)
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è {match.team1} vs {match.team2}: {e}")
        
        if totals_recommendations:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(totals_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç–æ—Ç–∞–ª–∞–º")
        
        return totals_recommendations
    
    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("=" * 60)
        logger.info("–ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê LIVE-–°–¢–ê–í–û–ö")
        logger.info("=" * 60)
        
        start_time = datetime.now()
        all_recommendations = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat
        system_watchdog.heartbeat()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
        sports = ['football', 'tennis', 'table_tennis', 'handball']
        
        for sport in sports:
            try:
                recommendations = self.analyze_sport(sport)
                all_recommendations.extend(recommendations)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞
                if sport == 'handball' and recommendations:
                    totals_recommendations = self._analyze_handball_totals(recommendations)
                    all_recommendations.extend(totals_recommendations)
                
                system_watchdog.heartbeat()  # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä—Ç–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {sport}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç—á–µ—Ç
        if all_recommendations:
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç—á–µ—Ç –¥–ª—è {len(all_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π HTML –æ—Ç—á–µ—Ç
            html_report = self.report_generator.generate_report(all_recommendations)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –°–¢–†–û–ì–û –ø–æ —à–∞–±–ª–æ–Ω—É –ø—Ä–æ–º–ø—Ç–∞ (—Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
            ai_telegram_report = prompt_telegram_formatter.format_report_by_prompt(all_recommendations)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ñ–∞–π–ª—ã
            timestamp = format_moscow_time_for_filename()
            
            # HTML –æ—Ç—á–µ—Ç
            html_filename = f"live_analysis_report_{timestamp}.html"
            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_report)
            
            # AI Telegram –æ—Ç—á–µ—Ç
            telegram_filename = f"ai_telegram_report_{timestamp}.html"
            with open(telegram_filename, 'w', encoding='utf-8') as f:
                f.write(ai_telegram_report)
            
            logger.info(f"HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {html_filename}")
            logger.info(f"AI Telegram –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {telegram_filename}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–Ω–∞–ª
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ Telegram –∫–∞–Ω–∞–ª...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –°–¢–†–û–ì–û –ø–æ –ø—Ä–æ–º–ø—Ç—É
            prompt_telegram_report = prompt_telegram_formatter.format_report_by_prompt(all_recommendations)
            telegram_success = self.telegram_integration.send_formatted_report(prompt_telegram_report)
            
            if telegram_success:
                logger.info("‚úÖ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_summary(all_recommendations)
        else:
            logger.info("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ Telegram
            self.telegram_integration.send_no_recommendations_message()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        logger.info(f"–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info("=" * 60)
    
    def print_summary(self, recommendations: List[MatchData]):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("–ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        by_sport = {}
        for rec in recommendations:
            sport = getattr(rec, 'sport_type', getattr(rec, 'sport', 'unknown'))
            if sport not in by_sport:
                by_sport[sport] = []
            by_sport[sport].append(rec)
        
        for sport, recs in by_sport.items():
            logger.info(f"{sport.upper()}: {len(recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for i, rec in enumerate(recs[:3]):
                logger.info(f"  {i+1}. {rec.team1} - {rec.team2} ({rec.score})")
                if rec.recommendation_type:
                    logger.info(f"     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.recommendation_value}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for rec in recommendations:
            source = getattr(rec, 'source', 'unknown')
            if source not in sources:
                sources[source] = 0
            sources[source] += 1
        
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
        for source, count in sources.items():
            logger.info(f"  {source.upper()}: {count} –º–∞—Ç—á–µ–π")
    
    def run_continuous(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ live-—Å—Ç–∞–≤–æ–∫...")
        logger.info("–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ watchdog
        system_watchdog.start()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram –∫–∞–Ω–∞–ª...")
        self.telegram_integration.send_startup_message()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç (–ø–æ –Ω–æ–≤–æ–º—É –ø—Ä–æ–º–ø—Ç—É)
        schedule.every(45).minutes.do(self.run_analysis_cycle)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É
        self.run_analysis_cycle()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        while True:
            try:
                schedule.run_pending()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏–∑-–∑–∞ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def run_single(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ live-—Å—Ç–∞–≤–æ–∫...")
        self.run_analysis_cycle()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    system = EnhancedLiveSystem()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--continuous':
        system.run_continuous()
    else:
        system.run_single()

if __name__ == "__main__":
    main()