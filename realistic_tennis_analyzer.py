#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–Ω–Ω–∏—Å–∞ –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞
"""

import json
import logging
import time
from typing import List, Optional
from openai import OpenAI
from multi_source_controller import MatchData

logger = logging.getLogger(__name__)

class RealisticTennisAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–Ω–Ω–∏—Å–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    """
    
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.model = "gpt-4o-mini"
        
        # Rate limiting
        self.last_request_time = 0
        self.min_request_interval = 2.0
        
    def analyze_tennis_matches_realistic(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π
        """
        if not matches:
            return []
        
        self.logger.info(f"üéæ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {sport_type}: {len(matches)} –º–∞—Ç—á–µ–π")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç—á
        for match in matches[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∞—Ç—á–∞
            try:
                recommendation = self._analyze_tennis_match_realistic(match, sport_type)
                if recommendation:
                    recommendations.append(recommendation)
                    
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {match.team1} vs {match.team2}: {e}")
                continue
        
        self.logger.info(f"üéæ –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ {sport_type}")
        return recommendations
    
    def _analyze_tennis_match_realistic(self, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = self._create_realistic_tennis_prompt(match, sport_type)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI
            response = self._call_openai_with_rate_limit(prompt)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            recommendation = self._process_tennis_response(response, match, sport_type)
            
            return recommendation
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞: {e}")
            return None
    
    def _create_realistic_tennis_prompt(self, match: MatchData, sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞"""
        
        base_info = f"""
        –ú–∞—Ç—á: {match.team1} vs {match.team2}
        –°—á–µ—Ç: {match.score}
        –°—Ç–∞—Ç—É—Å: {getattr(match, 'minute', '')}
        –¢—É—Ä–Ω–∏—Ä: {getattr(match, 'league', '')}
        """
        
        if sport_type == 'tennis':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º.

{base_info}

–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –¢–ï–ù–ù–ò–°–ê:
1. –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º? (1:0, 2:0, 2:1)
2. –ï—Å–ª–∏ –Ω–µ—Ç —Å—á–µ—Ç–∞ –ø–æ —Å–µ—Ç–∞–º - –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞?
3. –ö–∞—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ø-—Ç—É—Ä–Ω–∏—Ä—ã –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã)

–ó–ê–î–ê–ß–ê:
–û–ø—Ä–µ–¥–µ–ª–∏, —Å—Ç–æ–∏—Ç –ª–∏ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –î–û–°–¢–£–ü–ù–´–• –¥–∞–Ω–Ω—ã—Ö.
–ù–µ —Ç—Ä–µ–±—É–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ä–µ–π—Ç–∏–Ω–≥–∏, H2H, —Ñ–æ—Ä–º—É).

–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Å—Ç–∞–≤–∫–∏ - –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
–ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–∞ - –æ—Ç–∫–∞–∂–∏—Å—å.

            JSON: {{"recommendation": "–ü–æ–±–µ–¥–∞ [–ò–≥—Ä–æ–∫]/–ù–ï–¢", "confidence": 0.75, "reason": "–ö–†–ê–¢–ö–û–ï –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 15-20 —Å–ª–æ–≤)"}}"""

        elif sport_type == 'table_tennis':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É.

{base_info}

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –ù–ê–°–¢–û–õ–¨–ù–û–ì–û –¢–ï–ù–ù–ò–°–ê:
1. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1:0 –∏–ª–∏ 2:0 –ø–æ —Å–µ—Ç–∞–º (–ø–æ –ø—Ä–æ–º–ø—Ç—É)
2. –ï—Å–ª–∏ –≤–µ–¥–µ—Ç –ø–æ —Å–µ—Ç–∞–º - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–±–µ–¥—ã

–ó–ê–î–ê–ß–ê:
–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1:0 –∏–ª–∏ 2:0 –ø–æ —Å–µ—Ç–∞–º - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å—á–µ—Ç, —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞).

            JSON: {{"recommendation": "–ü–æ–±–µ–¥–∞ [–ò–≥—Ä–æ–∫]/–ù–ï–¢", "confidence": 0.75, "reason": "–ö–†–ê–¢–ö–û–ï –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 15-20 —Å–ª–æ–≤)"}}"""
        
        return base_info
    
    def _call_openai_with_rate_limit(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ OpenAI —Å rate limiting"""
        # Rate limiting
        time_since_last = time.time() - self.last_request_time
        if time_since_last < self.min_request_interval:
            time.sleep(self.min_request_interval - time_since_last)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200,
                temperature=0.2,
                timeout=30
            )
            
            self.last_request_time = time.time()
            return response.choices[0].message.content
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ OpenAI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise e
    
    def _process_tennis_response(self, response: str, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç GPT –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            response = response.strip()
            if response.startswith('```json'):
                response = response[7:]
            if response.endswith('```'):
                response = response[:-3]
            response = response.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            analysis = json.loads(response)
            
            recommendation_value = analysis.get('recommendation', '–ù–ï–¢')
            if recommendation_value == '–ù–ï–¢':
                return None
            
            confidence = analysis.get('confidence', 0)
            if confidence < 0.70:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = MatchData(
                sport=sport_type,
                team1=match.team1,
                team2=match.team2,
                score=match.score,
                minute=getattr(match, 'minute', ''),
                league=getattr(match, 'league', ''),
                link=getattr(match, 'link', ''),
                source='realistic_tennis'
            )
            
            recommendation.probability = confidence * 100
            recommendation.recommendation_type = 'win'
            recommendation.recommendation_value = recommendation_value
            recommendation.justification = analysis.get('reason', '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
            
            return recommendation
            
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
realistic_tennis_analyzer = None

def get_realistic_tennis_analyzer(api_key: str):
    global realistic_tennis_analyzer
    if realistic_tennis_analyzer is None:
        realistic_tennis_analyzer = RealisticTennisAnalyzer(api_key)
    return realistic_tennis_analyzer