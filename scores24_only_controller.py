#!/usr/bin/env python3
"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è scores24.live (–ø–æ –ø—Ä–æ–º–ø—Ç—É)
"""

import logging
from typing import List, Dict
from enhanced_real_controller import EnhancedRealDataController
from multi_source_controller import MatchData
from moscow_time import filter_live_matches_by_time

logger = logging.getLogger(__name__)

class Scores24OnlyController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —Å scores24.live
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ scores24 –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.scores24_controller = EnhancedRealDataController()
        
    def get_live_matches(self, sport_type: str) -> List[MatchData]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç live-–º–∞—Ç—á–∏ –¢–û–õ–¨–ö–û —Å scores24.live
        –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: –¢–û–õ–¨–ö–û scores24.live (–ø–æ –ø—Ä–æ–º–ø—Ç—É)
        """
        self.logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ live-–º–∞—Ç—á–µ–π –¢–û–õ–¨–ö–û —Å scores24.live –¥–ª—è {sport_type}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —Å scores24.live
            matches = self.scores24_controller.get_live_matches('scores24', sport_type)
            self.logger.info(f"üìä Scores24.live: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} live-–º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
            
            if not matches:
                self.logger.warning(f"‚ùå –ù–µ—Ç live-–º–∞—Ç—á–µ–π –Ω–∞ scores24.live –¥–ª—è {sport_type}")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –º–∞—Ç—á–∏
            active_matches = filter_live_matches_by_time(matches, sport_type)
            
            if len(active_matches) < len(matches):
                excluded_count = len(matches) - len(active_matches)
                self.logger.info(f"üèÅ –ò—Å–∫–ª—é—á–µ–Ω–æ {excluded_count} –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –º–∞—Ç—á–µ–π")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Ç–æ–ø-–ª–∏–≥–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
            prioritized_matches = self._prioritize_by_league(active_matches, sport_type)
            
            self.logger.info(f"‚úÖ –ò—Ç–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å scores24.live: {len(prioritized_matches)}")
            return prioritized_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å scores24.live: {e}")
            return []
    
    def _prioritize_by_league(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ª–∏–≥–∏ (–ø–æ –ø—Ä–æ–º–ø—Ç—É)
        """
        def get_league_priority(match):
            league = getattr(match, 'league', '').lower()
            
            if sport_type == 'football':
                # –¢–æ–ø-–ª–∏–≥–∏ —Ñ—É—Ç–±–æ–ª–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                top_leagues = {
                    'premier league': 100, 'champions league': 100, 'la liga': 95,
                    'serie a': 95, 'bundesliga': 95, 'ligue 1': 90, 'europa league': 85,
                    'eredivisie': 80, 'primeira liga': 75, 'championship': 70
                }
                
                for league_name, priority in top_leagues.items():
                    if league_name in league:
                        return priority
                
                # –°—Ä–µ–¥–Ω–∏–µ –ª–∏–≥–∏
                if any(keyword in league for keyword in ['–ø–µ—Ä–≤–∞—è –ª–∏–≥–∞', '–≤—Ç–æ—Ä–æ–π –¥–∏–≤–∏–∑–∏–æ–Ω', '–ª–∏–≥–∞ 2']):
                    return 30
                
                return 50  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                
            elif sport_type == 'tennis':
                # –¢–æ–ø-—Ç—É—Ä–Ω–∏—Ä—ã —Ç–µ–Ω–Ω–∏—Å–∞
                top_tournaments = {
                    'grand slam': 100, 'atp masters': 95, 'wta 1000': 95,
                    'atp 500': 85, 'wta 500': 85, 'atp 250': 75, 'wta 250': 75
                }
                
                for tournament, priority in top_tournaments.items():
                    if tournament in league:
                        return priority
                
                return 50
                
            elif sport_type == 'handball':
                # –¢–æ–ø-–ª–∏–≥–∏ –≥–∞–Ω–¥–±–æ–ª–∞
                if any(keyword in league for keyword in ['champions league', 'ehf', 'bundesliga']):
                    return 90
                
                return 50
            
            return 50
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ª–∏–≥–∏
        sorted_matches = sorted(matches, key=get_league_priority, reverse=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
        if sorted_matches:
            top_match = sorted_matches[0]
            priority = get_league_priority(top_match)
            self.logger.info(f"üèÜ –¢–æ–ø-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {top_match.team1} vs {top_match.team2} ({top_match.league}) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
        
        return sorted_matches
    
    def get_match_details(self, match_url: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        (–ø–æ –ø—Ä–æ–º–ø—Ç—É: –æ—Å–Ω–æ–≤–Ω–∞—è, prediction, trends, h2h, odds)
        """
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        return {
            'predictions': {},
            'trends': {},
            'h2h': {},
            'odds': {},
            'statistics': {}
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
scores24_only_controller = Scores24OnlyController()