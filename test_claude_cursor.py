#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ Claude —á–µ—Ä–µ–∑ Cursor API
"""

import subprocess
import tempfile
import os

def test_claude_cursor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞ Claude —á–µ—Ä–µ–∑ Cursor"""
    
    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏:
    
    1. –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ vs –õ–∏–≤–µ—Ä–ø—É–ª—å
       –°—á–µ—Ç: 2:1
       –ú–∏–Ω—É—Ç–∞: 67
       –õ–∏–≥–∞: –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞
    
    2. –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ vs –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥
       –°—á–µ—Ç: 1:0
       –ú–∏–Ω—É—Ç–∞: 45
       –õ–∏–≥–∞: –õ–∞ –õ–∏–≥–∞
    
    –í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [
        {
            "team1": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã 1",
            "team2": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã 2", 
            "score": "–°—á–µ—Ç",
            "recommendation": "–ü1/–ü2",
            "confidence": 0.85,
            "reasoning": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
        }
    ]
    """
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
        f.write(prompt)
        temp_file = f.name
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞ Claude...")
        
        # –°–ø–æ—Å–æ–± 1: cursor CLI
        print("\n1. –ü—Ä–æ–±—É–µ–º cursor CLI...")
        try:
            result = subprocess.run([
                'cursor', 'claude', 'analyze', temp_file
            ], capture_output=True, text=True, timeout=30)
            
            print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            print(f"   –í—ã–≤–æ–¥: {result.stdout[:200]}...")
            print(f"   –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
            
            if result.returncode == 0 and result.stdout.strip():
                print("   ‚úÖ Cursor CLI —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return result.stdout
        except Exception as e:
            print(f"   ‚ùå Cursor CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –°–ø–æ—Å–æ–± 2: cursor API
        print("\n2. –ü—Ä–æ–±—É–µ–º cursor API...")
        try:
            result = subprocess.run([
                'cursor', 'api', 'claude', 'analyze', temp_file
            ], capture_output=True, text=True, timeout=30)
            
            print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            print(f"   –í—ã–≤–æ–¥: {result.stdout[:200]}...")
            print(f"   –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
            
            if result.returncode == 0 and result.stdout.strip():
                print("   ‚úÖ Cursor API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return result.stdout
        except Exception as e:
            print(f"   ‚ùå Cursor API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –°–ø–æ—Å–æ–± 3: anthropic API
        print("\n3. –ü—Ä–æ–±—É–µ–º anthropic API...")
        try:
            import anthropic
            client = anthropic.Anthropic()
            
            response = client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            print("   ‚úÖ Anthropic API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return response.content[0].text
        except Exception as e:
            print(f"   ‚ùå Anthropic API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –°–ø–æ—Å–æ–± 4: curl –∫ Claude API
        print("\n4. –ü—Ä–æ–±—É–µ–º curl –∫ Claude API...")
        try:
            api_key = os.environ.get('ANTHROPIC_API_KEY') or os.environ.get('CLAUDE_API_KEY')
            if api_key:
                import json
                curl_cmd = [
                    'curl', '-X', 'POST',
                    'https://api.anthropic.com/v1/messages',
                    '-H', f'x-api-key: {api_key}',
                    '-H', 'Content-Type: application/json',
                    '-d', json.dumps({
                        "model": "claude-3-sonnet-20240229",
                        "max_tokens": 1000,
                        "messages": [{"role": "user", "content": prompt}]
                    })
                ]
                
                result = subprocess.run(curl_cmd, capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    response_data = json.loads(result.stdout)
                    if 'content' in response_data and len(response_data['content']) > 0:
                        print("   ‚úÖ Curl API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        return response_data['content'][0]['text']
                else:
                    print(f"   ‚ùå Curl API –æ—à–∏–±–∫–∞: {result.stderr}")
            else:
                print("   ‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è curl")
        except Exception as e:
            print(f"   ‚ùå Curl API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        print("\n‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return "[]"
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file):
            os.unlink(temp_file)

if __name__ == "__main__":
    result = test_claude_cursor()
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")