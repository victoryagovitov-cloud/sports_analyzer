"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å Claude API, OpenAI, –∏ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
"""
import os
import logging
import json
from typing import List, Dict, Any, Optional
from dataclasses import asdict
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

class UniversalAIAnalyzer:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.active_provider = None
        self.providers = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self._init_providers()
        
    def _init_providers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        
        # 1. –ü—Ä–æ–±—É–µ–º Claude API
        try:
            claude_key = os.getenv('ANTHROPIC_API_KEY') or os.getenv('CLAUDE_API_KEY')
            if claude_key:
                import anthropic
                client = anthropic.Anthropic(api_key=claude_key)
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                response = client.messages.create(
                    model="claude-3-haiku-20240307",
                    max_tokens=10,
                    messages=[{"role": "user", "content": "test"}]
                )
                self.providers['claude'] = client
                self.active_provider = 'claude'
                self.logger.info("‚úÖ Claude API –∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # 2. –ü—Ä–æ–±—É–µ–º OpenAI API
        try:
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key:
                from openai import OpenAI
                client = OpenAI(api_key=openai_key)
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": "test"}],
                    max_tokens=10
                )
                self.providers['openai'] = client
                if not self.active_provider:
                    self.active_provider = 'openai'
                self.logger.info("‚úÖ OpenAI API –∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # 3. –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        self.providers['heuristic'] = True
        if not self.active_provider:
            self.active_provider = 'heuristic'
            self.logger.info("‚úÖ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
        
        self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.active_provider}")
        self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {list(self.providers.keys())}")
    
    def test_connection(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º"""
        results = {}
        
        for provider in self.providers:
            try:
                if provider == 'claude' and 'claude' in self.providers:
                    response = self.providers['claude'].messages.create(
                        model="claude-3-haiku-20240307",
                        max_tokens=20,
                        messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?"}]
                    )
                    results[provider] = True
                    
                elif provider == 'openai' and 'openai' in self.providers:
                    response = self.providers['openai'].chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?"}],
                        max_tokens=20
                    )
                    results[provider] = True
                    
                elif provider == 'heuristic':
                    results[provider] = True
                    
            except Exception as e:
                results[provider] = False
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {provider}: {e}")
        
        return results
    
    def analyze_matches(self, matches: List[Dict[str, Any]], sport_type: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        
        if not matches:
            self.logger.warning("–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.active_provider == 'claude':
            return self._analyze_with_claude(matches, sport_type)
        elif self.active_provider == 'openai':
            return self._analyze_with_openai(matches, sport_type)
        else:
            return self._analyze_with_heuristics(matches, sport_type)
    
    def _analyze_with_claude(self, matches: List[Dict[str, Any]], sport_type: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude API"""
        try:
            matches_data = json.dumps(matches, ensure_ascii=False, indent=2)
            prompt = self._get_analysis_prompt(sport_type, matches_data)
            
            response = self.providers['claude'].messages.create(
                model="claude-3-haiku-20240307",
                max_tokens=1500,
                temperature=0.1,
                messages=[{"role": "user", "content": prompt}]
            )
            
            analysis_text = response.content[0].text
            analyzed_matches = self._parse_ai_response(analysis_text, matches, 'claude')
            
            self.logger.info(f"‚úÖ Claude –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {len(analyzed_matches)} –º–∞—Ç—á–µ–π –ø–æ {sport_type}")
            return analyzed_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Claude: {e}")
            return self._analyze_with_heuristics(matches, sport_type)
    
    def _analyze_with_openai(self, matches: List[Dict[str, Any]], sport_type: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API"""
        try:
            matches_data = json.dumps(matches, ensure_ascii=False, indent=2)
            prompt = self._get_analysis_prompt(sport_type, matches_data)
            
            response = self.providers['openai'].chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1500,
                temperature=0.1
            )
            
            analysis_text = response.choices[0].message.content
            analyzed_matches = self._parse_ai_response(analysis_text, matches, 'openai')
            
            self.logger.info(f"‚úÖ OpenAI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {len(analyzed_matches)} –º–∞—Ç—á–µ–π –ø–æ {sport_type}")
            return analyzed_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OpenAI: {e}")
            return self._analyze_with_heuristics(matches, sport_type)
    
    def _analyze_with_heuristics(self, matches: List[Dict[str, Any]], sport_type: str) -> List[Dict[str, Any]]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI API"""
        analyzed_matches = []
        
        for match in matches:
            match_copy = match.copy()
            
            # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
            recommendation = "–ü–†–û–ü–£–°–ö"
            confidence = 0
            reasoning = "–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                score = match.get('score', '0:0')
                minute = match.get('minute', 0)
                team1 = match.get('team1', '')
                team2 = match.get('team2', '')
                
                if sport_type == 'football':
                    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞
                    if 25 <= minute <= 75:  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
                        score_parts = score.split(':')
                        if len(score_parts) == 2:
                            score1, score2 = int(score_parts[0]), int(score_parts[1])
                            goal_diff = abs(score1 - score2)
                            
                            if goal_diff >= 2:  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 2+ –≥–æ–ª–∞
                                recommendation = "–°–¢–ê–í–ö–ê"
                                confidence = 7
                                reasoning = f"–†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ {goal_diff} –≥–æ–ª–∞ –Ω–∞ {minute} –º–∏–Ω—É—Ç–µ"
                
                elif sport_type == 'tennis':
                    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞
                    if score and ':' in score:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç –≤ —Ç–µ–Ω–Ω–∏—Å–µ
                        recommendation = "–°–¢–ê–í–ö–ê"
                        confidence = 6
                        reasoning = "–¢–µ–Ω–Ω–∏—Å–Ω—ã–π –º–∞—Ç—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                
                elif sport_type == 'handball':
                    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞
                    if minute >= 30:  # –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
                        score_parts = score.split(':')
                        if len(score_parts) == 2:
                            score1, score2 = int(score_parts[0]), int(score_parts[1])
                            goal_diff = abs(score1 - score2)
                            
                            if goal_diff >= 4:  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 4+ –≥–æ–ª–∞
                                recommendation = "–°–¢–ê–í–ö–ê"
                                confidence = 8
                                reasoning = f"–†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ {goal_diff} –≥–æ–ª–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ"
                
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            match_copy.update({
                'ai_recommendation': recommendation,
                'ai_bet_type': '–ü–æ–±–µ–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞' if recommendation == '–°–¢–ê–í–ö–ê' else '',
                'ai_confidence': confidence,
                'ai_reasoning': reasoning,
                'analyzed_by': 'heuristic'
            })
            
            analyzed_matches.append(match_copy)
        
        self.logger.info(f"‚úÖ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analyzed_matches)} –º–∞—Ç—á–µ–π")
        return analyzed_matches
    
    def _get_analysis_prompt(self, sport_type: str, matches_data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        base_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É live-—Å—Ç–∞–≤–æ–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Å—Ç–∞–≤–∫–∏.

–ö–†–ò–¢–ï–†–ò–ò:"""
        
        if sport_type == 'football':
            criteria = """
–§–£–¢–ë–û–õ:
- –í—Ä–µ–º—è: 25-75 –º–∏–Ω—É—Ç–∞
- –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–µ—Ç–µ: –º–∏–Ω–∏–º—É–º 2 –≥–æ–ª–∞
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –¥–æ 2.20
- –°—Ç–∞–≤–∏–º –Ω–∞ –ø–æ–±–µ–¥—É –ª–∏–¥–∏—Ä—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
"""
        elif sport_type == 'tennis':
            criteria = """
–¢–ï–ù–ù–ò–°:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
- –§–æ—Ä–º—É –∏–≥—Ä–æ–∫–æ–≤
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –¥–æ 1.70
- –°—Ç–∞–≤–∏–º –Ω–∞ –ø–æ–±–µ–¥—É —Ñ–∞–≤–æ—Ä–∏—Ç–∞
"""
        elif sport_type == 'handball':
            criteria = """
–ì–ê–ù–î–ë–û–õ:
- –í—Ä–µ–º—è: –ø–æ—Å–ª–µ 30 –º–∏–Ω—É—Ç—ã
- –†–∞–∑–Ω–∏—Ü–∞: –º–∏–Ω–∏–º—É–º 4 –≥–æ–ª–∞
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –¥–æ 1.45
- –°—Ç–∞–≤–∏–º –Ω–∞ –ø–æ–±–µ–¥—É –ª–∏–¥–µ—Ä–∞
"""
        else:
            criteria = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ –æ–±—â–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º"
        
        return f"""{base_prompt}{criteria}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{{"match_id": "ID", "recommendation": "–°–¢–ê–í–ö–ê/–ü–†–û–ü–£–°–ö", "confidence": 1-10, "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}

–ú–ê–¢–ß–ò:
{matches_data}"""
    
    def _parse_ai_response(self, response_text: str, original_matches: List[Dict[str, Any]], provider: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        analyzed_matches = []
        
        try:
            import re
            json_blocks = re.findall(r'\{[^}]*\}', response_text, re.DOTALL)
            
            recommendations = {}
            for block in json_blocks:
                try:
                    rec = json.loads(block)
                    if 'match_id' in rec:
                        recommendations[rec['match_id']] = rec
                except json.JSONDecodeError:
                    continue
            
            for match in original_matches:
                match_copy = match.copy()
                match_id = str(match.get('id', ''))
                
                if match_id in recommendations:
                    rec = recommendations[match_id]
                    match_copy.update({
                        'ai_recommendation': rec.get('recommendation', '–ü–†–û–ü–£–°–ö'),
                        'ai_bet_type': '–ü–æ–±–µ–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞' if rec.get('recommendation') == '–°–¢–ê–í–ö–ê' else '',
                        'ai_confidence': rec.get('confidence', 0),
                        'ai_reasoning': rec.get('reasoning', ''),
                        'analyzed_by': provider
                    })
                else:
                    match_copy.update({
                        'ai_recommendation': '–ü–†–û–ü–£–°–ö',
                        'ai_bet_type': '',
                        'ai_confidence': 0,
                        'ai_reasoning': '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º',
                        'analyzed_by': provider
                    })
                
                analyzed_matches.append(match_copy)
            
            return analyzed_matches
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ {provider}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
            return self._analyze_with_heuristics(original_matches, "general")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
universal_analyzer = None

def get_universal_analyzer() -> UniversalAIAnalyzer:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    global universal_analyzer
    if universal_analyzer is None:
        universal_analyzer = UniversalAIAnalyzer()
    return universal_analyzer


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        analyzer = get_universal_analyzer()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        results = analyzer.test_connection()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        for provider, status in results.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {provider}: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        test_matches = [
            {
                'id': 'test1',
                'team1': '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',
                'team2': '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥',
                'score': '2:0',
                'minute': 45,
                'sport': 'football'
            },
            {
                'id': 'test2', 
                'team1': '–î–∂–æ–∫–æ–≤–∏—á',
                'team2': '–§–µ–¥–µ—Ä–µ—Ä',
                'score': '6:4 2:1',
                'minute': 0,
                'sport': 'tennis'
            }
        ]
        
        results = analyzer.analyze_matches(test_matches, 'football')
        print(f"\n‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞: {len(results)} –º–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        for match in results:
            print(f"  üìà {match.get('team1')} vs {match.get('team2')}: {match.get('ai_recommendation')}")
            print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.get('ai_confidence')}/10")
            print(f"     –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {match.get('ai_reasoning')}")
            print(f"     –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {match.get('analyzed_by')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")