#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ live-—Å—Ç–∞–≤–æ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
"""
import sys
import os
import logging
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    claude_key = os.getenv('ANTHROPIC_API_KEY') or os.getenv('CLAUDE_API_KEY')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    if claude_key:
        print(f"  ‚úÖ Claude API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {claude_key[:20]}...")
    else:
        print("  ‚ö†Ô∏è  Claude API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if openai_key:
        print(f"  ‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {openai_key[:20]}...")
    else:
        print("  ‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        ('anthropic', 'Anthropic Claude API'),
        ('openai', 'OpenAI API'),
        ('requests', 'HTTP requests'),
        ('python-dotenv', 'Environment variables'),
        ('logging', 'Python logging (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)')
    ]
    
    for dep, desc in dependencies:
        try:
            if dep == 'python-dotenv':
                import dotenv
            elif dep == 'logging':
                import logging
            else:
                __import__(dep)
            print(f"  ‚úÖ {desc}")
        except ImportError:
            print(f"  ‚ùå {desc} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return True

def test_universal_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        from universal_ai_analyzer import get_universal_analyzer
        
        analyzer = get_universal_analyzer()
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        results = analyzer.test_connection()
        print("  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        for provider, status in results.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"    {status_icon} {provider}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        test_matches = [
            {
                'id': 'test1',
                'team1': '–¢–µ—Å—Ç –ö–æ–º–∞–Ω–¥–∞ 1',
                'team2': '–¢–µ—Å—Ç –ö–æ–º–∞–Ω–¥–∞ 2',
                'score': '2:0',
                'minute': 45,
                'sport_type': 'football'
            }
        ]
        
        analyzed = analyzer.analyze_matches(test_matches, 'football')
        print(f"  ‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞: {len(analyzed)} –º–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        if analyzed:
            match = analyzed[0]
            print(f"    üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {match.get('ai_recommendation')}")
            print(f"    üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.get('ai_confidence')}/10")
            print(f"    üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {match.get('ai_reasoning')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_main_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from claude_final_integration import ClaudeFinalIntegration
        
        integration = ClaudeFinalIntegration()
        print("  ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω
        if hasattr(integration, 'use_universal') and integration.use_universal:
            print("  ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        else:
            print("  ‚ö†Ô∏è  –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import ANALYSIS_SETTINGS
        
        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"    üéØ Claude —á–µ—Ä–µ–∑ Cursor: {ANALYSIS_SETTINGS.get('use_cursor_claude')}")
        print(f"    ü§ñ OpenAI GPT: {ANALYSIS_SETTINGS.get('use_openai_gpt')}")
        print(f"    ‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {ANALYSIS_SETTINGS.get('cycle_interval_minutes')} –º–∏–Ω—É—Ç")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        '.env',
        'config.py',
        'universal_ai_analyzer.py',
        'claude_final_integration.py',
        'claude_api_analyzer.py'
    ]
    
    for file_name in required_files:
        if os.path.exists(file_name):
            print(f"  ‚úÖ {file_name}")
        else:
            print(f"  ‚ùå {file_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê LIVE-–°–¢–ê–í–û–ö")
    print("=" * 60)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", test_universal_analyzer),
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_main_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python3 control_system.py start")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç(–æ–≤) –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install anthropic python-dotenv")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –∫–ª—é—á–∏")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)