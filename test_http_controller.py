"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from http_controller import HTTPController, HTTPBrowserController
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_site_accessibility():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤"""
    print("=" * 60)
    print("–¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ê–ô–¢–û–í")
    print("=" * 60)
    
    controller = HTTPController()
    results = controller.test_site_accessibility()
    
    for site_sport, accessible in results.items():
        status = "‚úÖ –î–û–°–¢–£–ü–ï–ù" if accessible else "‚ùå –ù–ï –î–û–°–¢–£–ü–ï–ù"
        print(f"{site_sport}: {status}")
    
    controller.close()


def test_http_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ HTTP-—Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê HTTP-–°–¢–†–ê–ù–ò–¶")
    print("=" * 60)
    
    controller = HTTPController()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
    for site in ['winline', 'betboom', 'baltbet']:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {site.upper()} ---")
        
        for sport in ['football', 'tennis', 'table_tennis', 'handball']:
            try:
                matches = controller.get_live_matches(site, sport)
                print(f"  {sport}: {len(matches)} –º–∞—Ç—á–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ç—á–∞
                for i, match in enumerate(matches[:2]):
                    print(f"    {i+1}. {match.team1} - {match.team2}")
                    print(f"       –°—á–µ—Ç: {match.score}, –ú–∏–Ω—É—Ç–∞: {match.minute}")
                    print(f"       –ö—ç—Ñ: {match.coefficient}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {match.is_locked}")
                    print(f"       –õ–∏–≥–∞: {match.league}")
                
            except Exception as e:
                print(f"  {sport}: –û–®–ò–ë–ö–ê - {e}")
    
    controller.close()


def test_http_browser_controller():
    """–¢–µ—Å—Ç HTTPBrowserController –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ HTTP BROWSER CONTROLLER")
    print("=" * 60)
    
    controller = HTTPBrowserController()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    test_urls = [
        'https://winline.ru/now/football/',
        'https://betboom.ru/sport/football?type=live',
        'https://baltbet.ru/live/football'
    ]
    
    for url in test_urls:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL: {url}")
        
        if controller.navigate_to_page(url):
            print("  ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            matches = controller.find_matches('football')
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ç—á–∞
            for i, match in enumerate(matches[:2]):
                print(f"    {i+1}. {match.team1} - {match.team2}")
                print(f"       –°—á–µ—Ç: {match.score}, –ö—ç—Ñ: {match.coefficient}")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞")
    
    controller.close_browser()


def test_handball_total_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ç–∞–ª–æ–≤ –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –¢–û–¢–ê–õ–û–í –ì–ê–ù–î–ë–û–õ–ê")
    print("=" * 60)
    
    controller = HTTPBrowserController()
    
    test_cases = [
        ("25:23", "40"),  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø
        ("18:16", "50"),  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø
        ("22:18", "40"),  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–º–ø
        ("30:25", "35"),  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø
        ("15:12", "60"),  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø
    ]
    
    for score, minute in test_cases:
        total_data = controller.calculate_handball_total(score, minute)
        print(f"\n–°—á–µ—Ç: {score}, –ú–∏–Ω—É—Ç–∞: {minute}")
        
        if total_data:
            print(f"  –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π —Ç–æ—Ç–∞–ª: {total_data['predicted_total']}")
            print(f"  –¢–ë: {total_data['total_more']}, –¢–ú: {total_data['total_less']}")
            print(f"  –¢–µ–º–ø: {total_data['tempo']}")
            print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {total_data['recommendation']}")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")
    
    controller.close_browser()


def test_favorite_probability():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–∞"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –§–ê–í–û–†–ò–¢–ê")
    print("=" * 60)
    
    controller = HTTPBrowserController()
    
    from http_controller import MatchData
    
    test_matches = [
        MatchData("–ö–æ–º–∞–Ω–¥–∞ –ê", "–ö–æ–º–∞–Ω–¥–∞ –ë", "2:1", "67'", 1.5, False, "football"),
        MatchData("–ö–æ–º–∞–Ω–¥–∞ –í", "–ö–æ–º–∞–Ω–¥–∞ –ì", "1:0", "23'", 2.1, False, "football"),
        MatchData("–ö–æ–º–∞–Ω–¥–∞ –î", "–ö–æ–º–∞–Ω–¥–∞ –ï", "3:0", "45'", 1.2, False, "football"),
    ]
    
    for match in test_matches:
        probability = controller.analyze_favorite_probability(match, {})
        print(f"{match.team1} - {match.team2}")
        print(f"  –°—á–µ—Ç: {match.score}, –ö—ç—Ñ: {match.coefficient}")
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞: {probability:.1f}%")
        print()
    
    controller.close_browser()


if __name__ == "__main__":
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTTP-–ö–û–ù–¢–†–û–õ–õ–ï–†–ê")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤
        test_site_accessibility()
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        test_http_parsing()
        
        # –¢–µ—Å—Ç HTTPBrowserController
        test_http_browser_controller()
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ç–∞–ª–æ–≤
        test_handball_total_calculation()
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        test_favorite_probability()
        
        print("\n" + "=" * 60)
        print("–í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n–û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()