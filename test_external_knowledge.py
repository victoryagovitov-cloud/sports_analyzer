#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ OpenAI
"""

import os
import logging
from external_knowledge_analyzer import get_external_knowledge_analyzer
from multi_source_controller import MatchData

logging.basicConfig(level=logging.INFO)

def test_external_knowledge():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"""
    print("üåê –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –° –í–ù–ï–®–ù–ò–ú–ò –ó–ù–ê–ù–ò–Ø–ú–ò")
    print("=" * 45)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = get_external_knowledge_analyzer(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    test_matches = [
        # –¢–æ–ø-–∫–æ–º–∞–Ω–¥—ã —Ñ—É—Ç–±–æ–ª–∞
        MatchData(
            sport='football',
            team1='Manchester City',
            team2='Brighton',
            score='1:0',
            minute='67',
            league='Premier League',
            link='test'
        ),
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç—ã
        MatchData(
            sport='tennis',
            team1='–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á',
            team2='–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å',
            score='1:0',
            minute='2-–π —Å–µ—Ç',
            league='ATP Masters',
            link='test'
        ),
        
        # –ú–µ–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        MatchData(
            sport='football',
            team1='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ê',
            team2='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ë',
            score='2:1',
            minute='65',
            league='–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–≥–∞',
            link='test'
        )
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_matches)} –º–∞—Ç—á–µ–π:")
    
    for i, match in enumerate(test_matches, 1):
        print(f"\n{i}. {match.team1} vs {match.team2}")
        print(f"   –°—á–µ—Ç: {match.score} ({match.minute})")
        print(f"   –õ–∏–≥–∞: {match.league}")
        
        try:
            sport_type = getattr(match, 'sport', 'football')
            recommendations = analyzer.analyze_with_external_knowledge([match], sport_type)
            
            if recommendations:
                rec = recommendations[0]
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.recommendation_value}")
                print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.probability:.1f}%")
                print(f"   üìå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.justification}")
            else:
                print("   ‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    return True

def test_known_vs_unknown():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï: –ò–ó–í–ï–°–¢–ù–´–ï vs –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï –ö–û–ú–ê–ù–î–´")
    print("=" * 55)
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        return
    
    analyzer = get_external_knowledge_analyzer(api_key)
    
    # –ò–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∞
    known_match = MatchData(
        sport='football',
        team1='Real Madrid',
        team2='Valencia',
        score='2:0',
        minute='70',
        league='La Liga',
        link='test'
    )
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    unknown_match = MatchData(
        sport='football',
        team1='–ú–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ê',
        team2='–ú–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ë',
        score='2:0',
        minute='70',
        league='–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∞—è –ª–∏–≥–∞',
        link='test'
    )
    
    matches = [
        ("üèÜ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ (Real Madrid vs Valencia)", known_match),
        ("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ (–ú–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)", unknown_match)
    ]
    
    for description, match in matches:
        print(f"\n{description}:")
        try:
            recommendations = analyzer.analyze_with_external_knowledge([match], 'football')
            
            if recommendations:
                rec = recommendations[0]
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.recommendation_value} ({rec.probability:.1f}%)")
                print(f"   üìå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.justification}")
            else:
                print("   ‚ùå –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    success = test_external_knowledge()
    if success:
        test_known_vs_unknown()
        
        print("\n" + "=" * 55)
        print("üåê –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è OpenAI –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –∏–≥—Ä–æ–∫–∞—Ö")
        print("üìä –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")