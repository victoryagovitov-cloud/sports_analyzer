#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ –≤–Ω–µ—à–Ω–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ OpenAI
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π GPT –æ –∫–æ–º–∞–Ω–¥–∞—Ö, –ª–∏–≥–∞—Ö, –∏–≥—Ä–æ–∫–∞—Ö
"""

import json
import logging
import time
from typing import List, Dict, Any, Optional
from openai import OpenAI
from multi_source_controller import MatchData

logger = logging.getLogger(__name__)

class ExternalKnowledgeAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∑–Ω–∞–Ω–∏—è OpenAI –æ —Å–ø–æ—Ä—Ç–µ
    """
    
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.model = "gpt-4o-mini"
        
        # Rate limiting
        self.last_request_time = 0
        self.min_request_interval = 2.0
        
    def analyze_with_external_knowledge(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π OpenAI
        """
        if not matches:
            return []
        
        self.logger.info(f"üåê –ê–Ω–∞–ª–∏–∑ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏: {len(matches)} –º–∞—Ç—á–µ–π {sport_type}")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        for match in matches[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∞—Ç—á–∞
            try:
                recommendation = self._analyze_match_with_knowledge(match, sport_type)
                if recommendation:
                    recommendations.append(recommendation)
                    
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏: {e}")
                continue
        
        self.logger.info(f"üåê –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
        return recommendations
    
    def _analyze_match_with_knowledge(self, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π
            knowledge_prompt = self._create_external_knowledge_prompt(match, sport_type)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI
            response = self._call_openai_with_rate_limit(knowledge_prompt)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            recommendation = self._process_knowledge_response(response, match, sport_type)
            
            return recommendation
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–Ω–∞–Ω–∏—è–º–∏: {e}")
            return None
    
    def _create_external_knowledge_prompt(self, match: MatchData, sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π"""
        
        base_info = f"""
        –ú–∞—Ç—á: {match.team1} vs {match.team2}
        –°—á–µ—Ç: {match.score}
        –ú–∏–Ω—É—Ç–∞: {getattr(match, 'minute', '')}
        –õ–∏–≥–∞: {getattr(match, 'league', '')}
        """
        
        if sport_type == 'football':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—É —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ–±—à–∏—Ä–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.

–ú–ê–¢–ß –ù–ê SCORES24.LIVE:
{base_info}

–ó–ê–î–ê–ß–ê: –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö, –ª–∏–≥–∞—Ö –∏ —Ñ—É—Ç–±–æ–ª–µ –¥–ª—è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ø—Ä–æ–≤–µ—Ä–∫–∏.

–ü–†–û–í–ï–†–¨ –ü–û –°–í–û–ò–ú –ó–ù–ê–ù–ò–Ø–ú:
1. üèÜ –ö–û–ú–ê–ù–î–´:
   - –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥?
   - –ö—Ç–æ –æ–±—ã—á–Ω–æ —Å–∏–ª—å–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏?
   - –ï—Å—Ç—å –ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–≤–µ–∑–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏?
   - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª—É–±–æ–≤

2. üèüÔ∏è –õ–ò–ì–ê/–¢–£–†–ù–ò–†:
   - –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —ç—Ç–æ–π –ª–∏–≥–∏?
   - –ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?
   - –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–ª–µ–π-–æ—Ñ—Ñ, –≤—ã–ª–µ—Ç)?

3. üìä –¢–ï–ö–£–©–ò–ô –°–ï–ó–û–ù:
   - –ö–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ?
   - –ü–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)
   - –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥

4. üéØ –ö–û–ù–¢–ï–ö–°–¢ –ú–ê–¢–ß–ê:
   - –î–æ–º–∞—à–Ω—è—è/–≤—ã–µ–∑–¥–Ω–∞—è –∏–≥—Ä–∞
   - –í–∞–∂–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
   - –¢—Ä–∞–≤–º—ã –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –í—Ä–µ–º—è: 25-75 –º–∏–Ω—É—Ç–∞ ‚úì
- –í–µ–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ø–í–ù–´–ú —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º –ø–æ —Ç–≤–æ–∏–º –∑–Ω–∞–Ω–∏—è–º
- –ú–∏–Ω–∏–º—É–º 75% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

–û–¢–í–ï–¢ JSON:
{{
    "external_analysis": {{
        "team_levels": "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –∫–æ–º–∞–Ω–¥",
        "league_quality": "–ê–Ω–∞–ª–∏–∑ –ª–∏–≥–∏", 
        "historical_advantage": "–ö—Ç–æ —Å–∏–ª—å–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏",
        "current_form": "–¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥"
    }},
    "recommendation": "–ü1/–ü2/–ù–ï–¢",
    "confidence": 0.78,
    "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π (15-20 —Å–ª–æ–≤)"
}}

–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥–∞–Ω–Ω—ã–º scores24 - –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""

        elif sport_type == 'tennis':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–Ω–Ω–∏—Å—É —Å –æ–±—à–∏—Ä–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö.

–ú–ê–¢–ß –ù–ê SCORES24.LIVE:
{base_info}

–ü–†–û–í–ï–†–¨ –ü–û –°–í–û–ò–ú –ó–ù–ê–ù–ò–Ø–ú:
1. üéæ –ò–ì–†–û–ö–ò:
   - –†–µ–π—Ç–∏–Ω–≥ ATP/WTA —ç—Ç–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
   - –ö—Ç–æ —Å–∏–ª—å–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏
   - –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
   - –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –≤ —Å–µ–∑–æ–Ω–µ

2. üèÜ –¢–£–†–ù–ò–†:
   - –£—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞
   - –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)
   - –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥

3. üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   - –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ (H2H)
   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è—Ö
   - –§–æ—Ä–º–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö

–û–¢–í–ï–¢ JSON:
{{
    "player_analysis": "–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–æ–≤",
    "h2h_knowledge": "–ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á",
    "recommendation": "–ü–æ–±–µ–¥–∞ [–ò–≥—Ä–æ–∫]/–ù–ï–¢",
    "confidence": 0.75,
    "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∑–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–æ–∫–∞—Ö"
}}"""

        elif sport_type == 'table_tennis':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É.

–ú–ê–¢–ß –ù–ê SCORES24.LIVE:
{base_info}

–ü–†–û–í–ï–†–¨ –ü–û –ó–ù–ê–ù–ò–Ø–ú:
- –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∏—Ä–æ–≤–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
- –°—Ç–∏–ª—å –∏–≥—Ä—ã (–∞—Ç–∞–∫—É—é—â–∏–π/–∑–∞—â–∏—Ç–Ω—ã–π)
- –û–ø—ã—Ç –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö

–û–¢–í–ï–¢ JSON:
{{
    "player_levels": "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–æ–≤",
    "recommendation": "–ü–æ–±–µ–¥–∞ [–ò–≥—Ä–æ–∫]/–ù–ï–¢", 
    "confidence": 0.75,
    "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
}}"""

        elif sport_type == 'handball':
            return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–∞–Ω–¥–±–æ–ª—É.

–ú–ê–¢–ß –ù–ê SCORES24.LIVE:
{base_info}

–ü–†–û–í–ï–†–¨ –ü–û –ó–ù–ê–ù–ò–Ø–ú:
- –£—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º –≥–∞–Ω–¥–±–æ–ª–µ
- –°—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —Ç–∞–∫—Ç–∏–∫–∞
- –û–ø—ã—Ç –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö

–û–¢–í–ï–¢ JSON:
{{
    "team_analysis": "–ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥",
    "recommendation": "–ü1/–ü2/–ù–ï–¢",
    "confidence": 0.75,
    "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
}}"""
        
        return base_info
    
    def _call_openai_with_rate_limit(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ OpenAI —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤"""
        # Rate limiting
        time_since_last = time.time() - self.last_request_time
        if time_since_last < self.min_request_interval:
            time.sleep(self.min_request_interval - time_since_last)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–ø–æ—Ä—Ç—É —Å –æ–±—à–∏—Ä–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö, –∏–≥—Ä–æ–∫–∞—Ö, –ª–∏–≥–∞—Ö –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=400,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                temperature=0.2,
                timeout=30
            )
            
            self.last_request_time = time.time()
            return response.choices[0].message.content
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ OpenAI –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏: {e}")
            raise e
    
    def _process_knowledge_response(self, response: str, match: MatchData, sport_type: str) -> Optional[MatchData]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            response = response.strip()
            if response.startswith('```json'):
                response = response[7:]
            if response.endswith('```'):
                response = response[:-3]
            response = response.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            analysis = json.loads(response)
            
            recommendation_value = analysis.get('recommendation', '–ù–ï–¢')
            if recommendation_value == '–ù–ï–¢':
                return None
            
            confidence = analysis.get('confidence', 0)
            if confidence < 0.75:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = MatchData(
                sport=sport_type,
                team1=match.team1,
                team2=match.team2,
                score=match.score,
                minute=getattr(match, 'minute', ''),
                league=getattr(match, 'league', ''),
                link=getattr(match, 'link', ''),
                source='external_knowledge'
            )
            
            recommendation.probability = confidence * 100
            recommendation.recommendation_type = 'win'
            recommendation.recommendation_value = recommendation_value
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
            base_reasoning = analysis.get('reasoning', '')
            external_info = self._extract_external_info(analysis, sport_type)
            
            if external_info:
                recommendation.justification = f"{base_reasoning} {external_info}"
            else:
                recommendation.justification = base_reasoning
            
            return recommendation
            
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏: {e}")
            self.logger.error(f"–û—Ç–≤–µ—Ç: {response}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π: {e}")
            return None
    
    def _extract_external_info(self, analysis: Dict, sport_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π"""
        try:
            if sport_type == 'football':
                external = analysis.get('external_analysis', {})
                team_levels = external.get('team_levels', '')
                historical = external.get('historical_advantage', '')
                
                if team_levels or historical:
                    return f"(–í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {team_levels or historical})"
                    
            elif sport_type == 'tennis':
                player_analysis = analysis.get('player_analysis', '')
                h2h = analysis.get('h2h_knowledge', '')
                
                if player_analysis or h2h:
                    return f"(–ó–Ω–∞–Ω–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö: {player_analysis or h2h})"
            
            return ""
            
        except Exception:
            return ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
external_knowledge_analyzer = None

def get_external_knowledge_analyzer(api_key: str):
    global external_knowledge_analyzer
    if external_knowledge_analyzer is None:
        external_knowledge_analyzer = ExternalKnowledgeAnalyzer(api_key)
    return external_knowledge_analyzer