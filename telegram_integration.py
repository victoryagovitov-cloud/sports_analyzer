"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram —Å AI-—Å–∏—Å—Ç–µ–º–æ–π live-–∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–≤–æ–∫
"""

import logging
import os
from datetime import datetime
from typing import List, Optional
from telegram_bot import TelegramChannelManager, TELEGRAM_CONFIG
from multi_source_controller import MatchData
from ai_telegram_generator import AITelegramGenerator

logger = logging.getLogger(__name__)

class TelegramIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram —Å AI-—Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, bot_token: str = None, channel_username: str = None):
        self.bot_token = bot_token or TELEGRAM_CONFIG['bot_token']
        self.channel_username = channel_username or TELEGRAM_CONFIG['channel_username']
        
        self.telegram_manager = TelegramChannelManager(self.bot_token, self.channel_username)
        self.ai_generator = AITelegramGenerator()
        self.logger = logging.getLogger(self.__class__.__name__)
        
    def send_ai_recommendations(self, recommendations: List[MatchData]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª
        """
        try:
            if not recommendations:
                self.logger.warning("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç—á–µ—Ç
            self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç—á–µ—Ç–∞ –¥–ª—è {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            ai_report = self.ai_generator.generate_ai_telegram_report(recommendations)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ AI-–æ—Ç—á–µ—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª...")
            success = self.telegram_manager.send_ai_report(ai_report)
            
            if success:
                self.logger.info("‚úÖ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return False
    
    def send_startup_message(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
        """
        startup_message = """
üöÄ <b>TrueLiveBet AI –∑–∞–ø—É—â–µ–Ω!</b>

ü§ñ –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ live-—Å—Ç–∞–≤–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: <i>{}</i>

üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö live-–º–∞—Ç—á–µ–π
‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏
‚Ä¢ –ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤

üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞:</b>
‚öΩ –§—É—Ç–±–æ–ª | üéæ –¢–µ–Ω–Ω–∏—Å | üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å | ü§æ –ì–∞–Ω–¥–±–æ–ª

üíé <b>TrueLiveBet AI ‚Äì –£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!</b>
        """.format(datetime.now().strftime("%H:%M –ú–°–ö, %d.%m.%Y"))
        
        return self.telegram_manager.bot.send_message(startup_message)
    
    def send_error_message(self, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        error_text = f"""
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ TrueLiveBet AI</b>

‚ùå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_message}
‚è∞ <b>–í—Ä–µ–º—è:</b> <i>{datetime.now().strftime("%H:%M –ú–°–ö, %d.%m.%Y")}</i>

üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã

üíé <b>TrueLiveBet AI</b>
        """
        
        return self.telegram_manager.bot.send_message(error_text)
    
    def send_no_recommendations_message(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        no_recs_message = """
üìä <b>TrueLiveBet AI - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚è∞ <b>–í—Ä–µ–º—è:</b> <i>{}</i>

üí° <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º AI-–∞–Ω–∞–ª–∏–∑–∞

üéØ <b>–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑:</b> –ß–µ—Ä–µ–∑ 50 –º–∏–Ω—É—Ç

üíé <b>TrueLiveBet AI ‚Äì –£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!</b>
        """.format(datetime.now().strftime("%H:%M –ú–°–ö, %d.%m.%Y"))
        
        return self.telegram_manager.bot.send_message(no_recs_message)
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        """
        try:
            self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
            if not self.telegram_manager.bot.test_connection():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self.telegram_manager.send_test_message():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
            
            self.logger.info("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram: {e}")
            return False
    
    def send_formatted_report(self, formatted_report: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram"""
        try:
            self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª...")
            success = self.telegram_manager.send_ai_report(formatted_report)
            
            if success:
                self.logger.info("‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
                
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

def test_telegram_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram"""
    logger = logging.getLogger(__name__)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        telegram_integration = TelegramIntegration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if telegram_integration.test_connection():
            logger.info("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            if telegram_integration.send_startup_message():
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ")
                
        else:
            logger.error("‚ùå Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    test_telegram_integration()