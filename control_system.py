#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π TrueLiveBet AI
"""

import os
import sys
import subprocess
import signal
import psutil
import time
from datetime import datetime

class TrueLiveBetController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π TrueLiveBet AI"""
    
    def __init__(self):
        self.system_processes = []
        
    def check_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TRUELIVEBET AI")
        print("=" * 40)
        
        # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–∏—Å—Ç–µ–º—ã
        running_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if any(keyword in cmdline.lower() for keyword in 
                      ['start_improved', 'enhanced_live', 'truelivebet', 'sports_analyzer']):
                    running_processes.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cmdline': cmdline
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if running_processes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(running_processes)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
            for i, proc in enumerate(running_processes, 1):
                print(f"  {i}. PID: {proc['pid']} - {proc['cmdline'][:80]}...")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        log_files = ['improved_production.log', 'production.log', 'live_betting_analysis.log']
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        for log_file in log_files:
            if os.path.exists(log_file):
                try:
                    mtime = os.path.getmtime(log_file)
                    last_modified = datetime.fromtimestamp(mtime).strftime('%H:%M:%S %d.%m.%Y')
                    size = os.path.getsize(log_file)
                    print(f"  üìÑ {log_file}: {size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω {last_modified}")
                except Exception:
                    print(f"  üìÑ {log_file}: —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        return running_processes
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("üõë –û–°–¢–ê–ù–û–í–ö–ê TRUELIVEBET AI")
        print("=" * 30)
        
        stopped_count = 0
        
        # –ò—â–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if any(keyword in cmdline.lower() for keyword in 
                      ['start_improved', 'enhanced_live', 'main.py', 'quick_start.py']):
                    
                    if 'sports_analyzer' in cmdline or 'truelivebet' in cmdline.lower():
                        print(f"üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']}: {cmdline[:60]}...")
                        
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                            os.kill(proc.info['pid'], signal.SIGTERM)
                            time.sleep(2)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                            if psutil.pid_exists(proc.info['pid']):
                                print(f"‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ PID {proc.info['pid']}")
                                os.kill(proc.info['pid'], signal.SIGKILL)
                            
                            stopped_count += 1
                            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            
                        except ProcessLookupError:
                            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                            stopped_count += 1
                        except PermissionError:
                            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PID {proc.info['pid']}")
                        
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if stopped_count > 0:
            print(f"\n‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        time.sleep(1)
        remaining = self.check_status()
        if not remaining:
            print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        return stopped_count
    
    def start_single(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –û–î–ò–ù–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 35)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if self.check_status():
                print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë.")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º python3 start_improved.py single...")
            result = subprocess.run([
                'python3', 'start_improved.py', 'single'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥: {result.returncode})")
                if result.stderr:
                    print(f"–û—à–∏–±–∫–∏: {result.stderr[-500:]}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚è∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def start_continuous_background(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ"""
        print("üîÑ –ó–ê–ü–£–°–ö –ù–ï–ü–†–ï–†–´–í–ù–û–ô –†–ê–ë–û–¢–´ –í –§–û–ù–ï")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        if self.check_status():
            print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen([
                'python3', 'start_improved.py', 'continuous'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ (PID: {process.pid})")
            print("üìã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 control_system.py stop")
            print("üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: python3 control_system.py status")
            print("üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: tail -f improved_production.log")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    controller = TrueLiveBetController()
    
    if len(sys.argv) < 2:
        print("üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï TRUELIVEBET AI")
        print("=" * 30)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 control_system.py status      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
        print("  python3 control_system.py stop        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("  python3 control_system.py single      # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("  python3 control_system.py start       # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ")
        print("  python3 control_system.py restart     # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == 'status':
        controller.check_status()
        
    elif command == 'stop':
        controller.stop_all()
        
    elif command == 'single':
        controller.start_single()
        
    elif command == 'start':
        controller.start_continuous_background()
        
    elif command == 'restart':
        print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´")
        print("=" * 20)
        controller.stop_all()
        time.sleep(3)
        controller.start_continuous_background()
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: status, stop, single, start, restart")
        sys.exit(1)

if __name__ == "__main__":
    main()