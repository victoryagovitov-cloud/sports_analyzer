#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û Claude –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Cursor
"""

import logging
from cursor_claude_analyzer import cursor_claude_analyzer
from real_claude_integration import real_claude_integration
from multi_source_controller import MatchData

logging.basicConfig(level=logging.INFO)

def test_free_claude_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Claude –∞–Ω–∞–ª–∏–∑"""
    print("üÜì –¢–ï–°–¢ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û CLAUDE –ê–ù–ê–õ–ò–ó–ê –ß–ï–†–ï–ó CURSOR")
    print("=" * 55)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
    test_matches = [
        # –¢–æ–ø-–ª–∏–≥–∞, —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è, —Ä–∞–∑—Ä—ã–≤ –≤ —Å—á–µ—Ç–µ
        MatchData(
            sport='football',
            team1='Manchester City',
            team2='Brighton',
            score='2:1',
            minute='67',
            league='Premier League',
            link='test'
        ),
        
        # –ë–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤, —Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∞
        MatchData(
            sport='football',
            team1='Barcelona',
            team2='Getafe',
            score='3:0',
            minute='58',
            league='La Liga',
            link='test'
        ),
        
        # –û–±—ã—á–Ω–∞—è –ª–∏–≥–∞, –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤
        MatchData(
            sport='football',
            team1='–õ–æ–∫–æ–º–æ—Ç–∏–≤',
            team2='–°–ø–∞—Ä—Ç–∞–∫',
            score='1:0',
            minute='72',
            league='–†–ü–õ',
            link='test'
        ),
        
        # –¢–µ–Ω–Ω–∏—Å
        MatchData(
            sport='tennis',
            team1='–î–∂–æ–∫–æ–≤–∏—á –ù.',
            team2='–ù–∞–¥–∞–ª—å –†.',
            score='1-0 (6-4, 4-3)',
            minute='',
            league='ATP Masters',
            link='test'
        )
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_matches)} –º–∞—Ç—á–µ–π:")
    for i, match in enumerate(test_matches, 1):
        print(f"  {i}. {match.team1} vs {match.team2} ({match.score}, {match.minute}') - {match.league}")
    
    print("\nü§ñ –ó–∞–ø—É—Å–∫ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û Claude –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É—Ç–±–æ–ª
    football_matches = [m for m in test_matches if getattr(m, 'sport', '') == 'football']
    recommendations = cursor_claude_analyzer.analyze_matches_with_cursor_claude(football_matches, 'football')
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
    
    if recommendations:
        print("\n‚úÖ –ë–ï–°–ü–õ–ê–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–¢ CLAUDE:")
        for i, rec in enumerate(recommendations, 1):
            print(f"\n{i}. {rec.team1} vs {rec.team2}")
            print(f"   –°—á–µ—Ç: {rec.score} ({rec.minute}')")
            print(f"   –õ–∏–≥–∞: {rec.league}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.recommendation_value}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.probability:.1f}%")
            print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.justification}")
    else:
        print("\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        print("- –í—Ä–µ–º—è –º–∞—Ç—á–∞ –≤–Ω–µ –æ–∫–Ω–∞ 25-75 –º–∏–Ω—É—Ç")
        print("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<80%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = cursor_claude_analyzer.get_statistics()
    print(f"\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø:")
    print(f"–ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_analyses']}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞: {stats['cache_hit_rate']}")
    print(f"–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {stats['estimated_cost_savings']}")
    print(f"üíé –í–°–ï –ë–ï–°–ü–õ–ê–¢–ù–û —á–µ—Ä–µ–∑ Claude –≤ Cursor!")
    
    print("\n" + "=" * 55)
    return len(recommendations) > 0

def test_real_claude_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\nüéØ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô CLAUDE –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 40)
    
    test_match = MatchData(
        sport='football',
        team1='Real Madrid',
        team2='Valencia',
        score='2:0',
        minute='65',
        league='La Liga',
        link='test'
    )
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç—á: {test_match.team1} vs {test_match.team2}")
    print(f"–°—á–µ—Ç: {test_match.score} ({test_match.minute}') - {test_match.league}")
    
    # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Claude
    result = real_claude_integration.analyze_football_match_with_real_claude(test_match)
    
    if result:
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ê–õ–¨–ù–û–ì–û CLAUDE –ê–ù–ê–õ–ò–ó–ê:")
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.recommendation_value}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.probability:.1f}%")
        print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.justification}")
    else:
        print("\n‚ùå –ú–∞—Ç—á –Ω–µ –ø—Ä–æ—à–µ–ª –∫—Ä–∏—Ç–µ—Ä–∏–∏ Claude –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏
    stats = real_claude_integration.get_free_analysis_stats()
    print(f"\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø:")
    print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {stats['provider']}")
    print(f"–ê–Ω–∞–ª–∏–∑–æ–≤: {stats['total_free_analyses']}")
    print(f"–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {stats['estimated_savings']}")
    
    return result is not None

def compare_analyzers():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã"""
    print("\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í")
    print("=" * 35)
    
    test_match = MatchData(
        sport='football',
        team1='Bayern Munich',
        team2='Hoffenheim', 
        score='3:1',
        minute='68',
        league='Bundesliga',
        link='test'
    )
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á: {test_match.team1} vs {test_match.team2}")
    print(f"–°—á–µ—Ç: {test_match.score} ({test_match.minute}') - {test_match.league}")
    
    analyzers = [
        ("üÜì Cursor Claude (–ë–ï–°–ü–õ–ê–¢–ù–û)", cursor_claude_analyzer.analyze_matches_with_cursor_claude, [test_match], 'football'),
        ("üéØ Real Claude Integration", real_claude_integration.analyze_football_match_with_real_claude, test_match, None)
    ]
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    
    for name, analyzer_func, data, sport_type in analyzers:
        try:
            if sport_type:
                result = analyzer_func(data, sport_type)
                if result and len(result) > 0:
                    rec = result[0]
                    print(f"  ‚úÖ {name}: {rec.recommendation_value} ({rec.probability:.0f}%)")
                else:
                    print(f"  ‚ùå {name}: –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            else:
                result = analyzer_func(data)
                if result:
                    print(f"  ‚úÖ {name}: {result.recommendation_value} ({result.probability:.0f}%)")
                else:
                    print(f"  ‚ùå {name}: –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    
        except Exception as e:
            print(f"  ‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Claude
    success1 = test_free_claude_analysis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    success2 = test_real_claude_integration()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
    compare_analyzers()
    
    if success1 or success2:
        print("\nüéâ –ë–ï–°–ü–õ–ê–¢–ù–´–ô CLAUDE –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–ê–ï–¢!")
        print("üí∞ –≠–∫–æ–Ω–æ–º–∏—è: 100% —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ AI API")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑")
    else:
        print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")