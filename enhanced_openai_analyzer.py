#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import logging
import time
from typing import List, Dict, Any
from openai import OpenAI
from multi_source_controller import MatchData

logger = logging.getLogger(__name__)

class EnhancedOpenAIAnalyzer:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    """
    
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.model = "gpt-4o-mini"
        
        # Rate limiting –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.last_request_time = 0
        self.min_request_interval = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.max_retries = 3
        
    def analyze_matches_with_enhanced_gpt(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —Å –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        """
        if not matches:
            return []
        
        self.logger.info(f"ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è {sport_type}")
        
        # –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        filtered_matches = self._enhanced_prefilter(matches, sport_type)
        self.logger.info(f"–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_matches)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π")
        
        if not filtered_matches:
            return []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–∞—Ç—á–∏
        max_matches = 3
        matches_to_analyze = filtered_matches[:max_matches]
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        for match in matches_to_analyze:
            try:
                recommendation = self._analyze_single_match_enhanced(match, sport_type)
                if recommendation:
                    recommendations.append(recommendation)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞ {match.team1} vs {match.team2}: {e}")
                continue
        
        self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {sport_type}")
        return recommendations
    
    def _enhanced_prefilter(self, matches: List[MatchData], sport_type: str) -> List[MatchData]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        filtered = []
        
        for match in matches:
            if sport_type == 'football':
                if self._is_football_match_enhanced_worthy(match):
                    filtered.append(match)
            elif sport_type == 'tennis':
                if self._is_tennis_match_enhanced_worthy(match):
                    filtered.append(match)
            elif sport_type == 'table_tennis':
                if self._is_table_tennis_match_enhanced_worthy(match):
                    filtered.append(match)
            elif sport_type == 'handball':
                if self._is_handball_match_enhanced_worthy(match):
                    filtered.append(match)
        
        return filtered
    
    def _is_football_match_enhanced_worthy(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–æ –Ω–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            if ':' not in match.score:
                return False
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            # –ù–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏: 25-75 –º–∏–Ω—É—Ç–∞, –Ω–µ –Ω–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç
            if home_score == away_score:  # –ù–∏—á—å—è
                return False
            if minute < 25 or minute > 75:  # –í–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
                return False
            
            return True
            
        except Exception:
            return False
    
    def _is_tennis_match_enhanced_worthy(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            score = match.score
            minute = getattr(match, 'minute', '')
            
            # –ü–æ –ø—Ä–æ–º–ø—Ç—É: "–í–µ–¥—É—â–∏–π –≤—ã–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π —Å–µ—Ç –∏–ª–∏ —Ä–∞–∑—Ä—ã–≤ ‚â• 3 –≥–µ–π–º–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—á–µ—Ç–∞
            if '-' in score and score.count('-') == 1:
                # –§–æ—Ä–º–∞—Ç "1-0", "2-1" - –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º
                try:
                    sets1, sets2 = map(int, score.split('-'))
                    if sets1 != sets2:  # –ï—Å—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∞–º
                        return True
                except ValueError:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –≥–µ–π–º–∞–º–∏ –≤ —Å–∫–æ–±–∫–∞—Ö "1-0 (6-4, 3-2)"
            if '(' in score and ')' in score:
                return True  # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—á–µ—Ç = –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ –ø–æ –º–∏–Ω—É—Ç–µ
            if minute and any(keyword in minute.lower() for keyword in ['—Å–µ—Ç', 'set', '–ø–∞—Ä—Ç–∏—è']):
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å–µ—Ç–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                return True
            
            # –ï—Å–ª–∏ —Å—á–µ—Ç "0:0" –∏ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ—Ç - –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º (–Ω–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞)
            if score == "0:0" and "1-–π —Å–µ—Ç" in minute:
                return False
                
            return False  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            
        except Exception:
            return False  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    
    def _is_table_tennis_match_enhanced_worthy(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            score = match.score
            
            # –ü–æ –ø—Ä–æ–º–ø—Ç—É: "–í–µ–¥—É—â–∏–π 1:0 –∏–ª–∏ 2:0 –ø–æ —Å–µ—Ç–∞–º"
            
            if ':' in score:
                try:
                    sets1, sets2 = map(int, score.split(':'))
                    # –ò—â–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1:0 –∏–ª–∏ 2:0 (–≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É)
                    return (sets1 == 1 and sets2 == 0) or (sets1 == 2 and sets2 == 0) or \
                           (sets1 == 0 and sets2 == 1) or (sets1 == 0 and sets2 == 2)
                except ValueError:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–æ–º "1-0", "2-0"  
            if '-' in score and score.count('-') == 1:
                try:
                    sets1, sets2 = map(int, score.split('-'))
                    return (sets1 == 1 and sets2 == 0) or (sets1 == 2 and sets2 == 0) or \
                           (sets1 == 0 and sets2 == 1) or (sets1 == 0 and sets2 == 2)
                except ValueError:
                    pass
            
            return False
            
        except Exception:
            return False
    
    def _is_handball_match_enhanced_worthy(self, match: MatchData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–æ –Ω–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            if ':' not in match.score:
                return False
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            # –í–µ–¥—É—â–∏–π ‚â•4 –º—è—á–∞, –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (>30 –º–∏–Ω)
            goal_diff = abs(home_score - away_score)
            return goal_diff >= 4 and minute > 30
            
        except Exception:
            return False
    
    def _analyze_single_match_enhanced(self, match: MatchData, sport_type: str) -> MatchData:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
            prompt = self._create_enhanced_match_prompt(match, sport_type)
            
            # –í—ã–∑—ã–≤–∞–µ–º GPT
            gpt_response = self._call_openai_gpt_enhanced(prompt)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            analysis_result = self._process_single_match_response(gpt_response, match, sport_type)
            
            return analysis_result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞: {e}")
            return None
    
    def _create_enhanced_match_prompt(self, match: MatchData, sport_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        base_match_info = f"""
        –ú–∞—Ç—á: {match.team1} vs {match.team2}
        –°—á–µ—Ç: {match.score}
        –ú–∏–Ω—É—Ç–∞: {match.minute}
        –õ–∏–≥–∞: {match.league}
        """
        
        if sport_type == 'football':
            criteria_prompt = f"""
            –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Å 15+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
            
            –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –ú–ê–¢–ß:
            {base_match_info}
            
            –ù–û–í–´–ï –°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –§–£–¢–ë–û–õ–ê:
            1. –í—Ä–µ–º—è –º–∞—Ç—á–∞: 25-75 –º–∏–Ω—É—Ç–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
            2. –°—á–µ—Ç: –ù–ï –Ω–∏—á–µ–π–Ω—ã–π (–∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏)
            3. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–ø—Ä–µ–¥–µ–ª–∏ —è–≤–Ω–æ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–∞
            
            –ö–†–ò–¢–ï–†–ò–ò –§–ê–í–û–†–ò–¢–ê (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–∑ 5):
            ‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚â• 5 –ø–æ–∑–∏—Ü–∏–π
            ‚úÖ –§–æ—Ä–º–∞: ‚â• 3 –ø–æ–±–µ–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∏–≥—Ä–∞—Ö  
            ‚úÖ H2H: ‚â• 3 –ø–æ–±–µ–¥—ã –∏–∑ 5 –≤—Å—Ç—Ä–µ—á
            ‚úÖ xG ‚â• 1.5 —É —Ñ–∞–≤–æ—Ä–∏—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ‚â§ 2.20
            
            –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:
            - –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–≥–∏ (—Ç–æ–ø-–ª–∏–≥–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã)
            - –î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
            - –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ (–±–æ—Ä—å–±–∞ –∑–∞ —Ç–∏—Ç—É–ª/–ø—Ä–æ—Ç–∏–≤ –≤—ã–ª–µ—Ç–∞)
            - –¢—Ä–∞–≤–º—ã –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            
            –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –º–∞—Ç—á –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
            1. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ —è–≤–Ω—ã–º —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º?
            2. –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –µ—ë –ø–æ–±–µ–¥—ã (—á–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)?
            3. –°—Ç–æ–∏—Ç –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É?
            
            –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –ü–∏—à–∏ –ö–†–ê–¢–ö–û (–º–∞–∫—Å–∏–º—É–º 15-20 —Å–ª–æ–≤), —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.
            
            –í–µ—Ä–Ω–∏ JSON:
            {{
                "is_favorite": true/false,
                "confidence": 0.82,
                "recommendation": "–ü1/–ü2/–ù–ï–¢",
                "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (15-20 —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º)"
            }}
            """
            
        elif sport_type == 'tennis':
            criteria_prompt = f"""
            –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.
            
            –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –ú–ê–¢–ß:
            {base_match_info}
            
            –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –¢–ï–ù–ù–ò–°–ê:
            1. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –í–µ–¥—É—â–∏–π –≤—ã–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π —Å–µ—Ç –ò–õ–ò —Ä–∞–∑—Ä—ã–≤ ‚â• 3 –≥–µ–π–º–∞
            2. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
            
            –ö–†–ò–¢–ï–†–ò–ò –§–ê–í–û–†–ò–¢–ê (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–∑ 5):
            ‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ‚â• 20 –ø–æ–∑–∏—Ü–∏–π
            ‚úÖ –§–æ—Ä–º–∞: ‚â• 4 –ø–æ–±–µ–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–∞—Ö
            ‚úÖ H2H: ‚â• 3 –ø–æ–±–µ–¥—ã –∏–∑ 5 –≤—Å—Ç—Ä–µ—á  
            ‚úÖ –ü–µ—Ä–≤—ã–µ –ø–æ–¥–∞—á–∏ ‚â• 65%
            ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ‚â§ 1.70
            
            –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –ú–∞–∫—Å–∏–º—É–º 15-20 —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.
            
            –í–µ—Ä–Ω–∏ JSON: {{"is_favorite": true/false, "confidence": 0.80, "recommendation": "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞/–ù–ï–¢", "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}
            """
            
        elif sport_type == 'handball':
            criteria_prompt = f"""
            –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –≥–∞–Ω–¥–±–æ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.
            
            –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –ú–ê–¢–ß:
            {base_match_info}
            
            –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –ì–ê–ù–î–ë–û–õ–ê:
            1. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –í–µ–¥—É—â–∏–π ‚â• 4 –º—è—á–∞, –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
            2. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–≤–æ—Ä–∏—Ç–∏–∑–º–∞ + —Ä–∞—Å—á–µ—Ç —Ç–æ—Ç–∞–ª–æ–≤
            
            –ö–†–ò–¢–ï–†–ò–ò –§–ê–í–û–†–ò–¢–ê:
            ‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚â• 5 –ø–æ–∑–∏—Ü–∏–π
            ‚úÖ –§–æ—Ä–º–∞: ‚â• 4 –ø–æ–±–µ–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∏–≥—Ä–∞—Ö
            ‚úÖ H2H: ‚â• 4 –ø–æ–±–µ–¥—ã –∏–∑ 5 –≤—Å—Ç—Ä–µ—á
            ‚úÖ –°—Ä–µ–¥–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å ‚â• 30 –º—è—á–µ–π
            ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ‚â§ 1.45
            
            –†–ê–°–ß–ï–¢ –¢–û–¢–ê–õ–û–í:
            –§–æ—Ä–º—É–ª–∞: –û–ö–†–£–ì–õ–í–í–ï–†–•((–ì–æ–ª—ã1 + –ì–æ–ª—ã2) / (30 + –ú–∏–Ω—É—Ç–∞_–í—Ç–æ—Ä–æ–π_–ü–æ–ª–æ–≤–∏–Ω—ã) * 60)
            - –ì–æ–ª—ã > –º–∏–Ω—É—Ç—ã ‚Üí –¢–ë [–ó–Ω–∞—á–µ–Ω–∏–µ - 4]
            - –ì–æ–ª—ã < –º–∏–Ω—É—Ç—ã ‚Üí –¢–ú [–ó–Ω–∞—á–µ–Ω–∏–µ + 3]
            
            –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –ú–∞–∫—Å–∏–º—É–º 15-20 —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.
            
            –í–µ—Ä–Ω–∏ JSON: {{"is_favorite": true/false, "confidence": 0.80, "recommendation": "–ü1/–ü2/–ù–ï–¢", "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}
            """
        
        else:
            criteria_prompt = base_match_info
        
        return criteria_prompt
    
    def _call_openai_gpt_enhanced(self, prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI GPT API"""
        # –°–æ–±–ª—é–¥–∞–µ–º rate limiting
        time_since_last = time.time() - self.last_request_time
        if time_since_last < self.min_request_interval:
            sleep_time = self.min_request_interval - time_since_last
            time.sleep(sleep_time)
        
        for attempt in range(self.max_retries):
            try:
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {
                            "role": "system", 
                            "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
                        },
                        {
                            "role": "user", 
                            "content": prompt
                        }
                    ],
                    max_tokens=800,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
                    temperature=0.2,
                    timeout=30
                )
                
                self.last_request_time = time.time()
                return response.choices[0].message.content
                
            except Exception as e:
                if attempt < self.max_retries - 1:
                    sleep_time = (attempt + 1) * 3
                    self.logger.warning(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time}—Å: {e}")
                    time.sleep(sleep_time)
                else:
                    raise e
    
    def _process_single_match_response(self, gpt_response: str, match: MatchData, sport_type: str) -> MatchData:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç GPT –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            gpt_response = gpt_response.strip()
            if gpt_response.startswith('```json'):
                gpt_response = gpt_response[7:]
            if gpt_response.endswith('```'):
                gpt_response = gpt_response[:-3]
            gpt_response = gpt_response.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            analysis = json.loads(gpt_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–≤–∫–∞
            if not analysis.get('is_favorite', False):
                return None
            
            recommendation_value = analysis.get('recommendation', '–ù–ï–¢')
            if recommendation_value == '–ù–ï–¢':
                return None
            
            confidence = analysis.get('confidence', 0)
            if confidence < 0.75:  # –ú–∏–Ω–∏–º—É–º 75% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = MatchData(
                sport=sport_type,
                team1=match.team1,
                team2=match.team2,
                score=match.score,
                minute=getattr(match, 'minute', ''),
                league=getattr(match, 'league', ''),
                link=getattr(match, 'link', ''),
                source=getattr(match, 'source', 'enhanced_gpt')
            )
            
            recommendation.probability = confidence * 100
            recommendation.recommendation_type = 'win'
            recommendation.recommendation_value = recommendation_value
            recommendation.justification = analysis.get('reasoning', 'GPT –∞–Ω–∞–ª–∏–∑')
            
            return recommendation
            
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            self.logger.error(f"–û—Ç–≤–µ—Ç GPT: {gpt_response}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def calculate_totals_enhanced(self, match: MatchData) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç–æ—Ç–∞–ª–æ–≤ –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ"""
        try:
            if ':' not in match.score:
                return {}
            
            home_score, away_score = map(int, match.score.split(':'))
            minute_str = getattr(match, 'minute', '0')
            minute = int(minute_str.replace("'", "").replace("‚Ä≤", "")) if minute_str.replace("'", "").replace("‚Ä≤", "").isdigit() else 0
            
            total_goals = home_score + away_score
            
            # –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: –û–ö–†–£–ì–õ–í–í–ï–†–•((–ì–æ–ª—ã1 + –ì–æ–ª—ã2) / (30 + –ú–∏–Ω—É—Ç–∞_–í—Ç–æ—Ä–æ–π_–ü–æ–ª–æ–≤–∏–Ω—ã) * 60)
            if minute > 45:  # –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
                second_half_minute = minute - 45
                predicted_total = ((total_goals) / (30 + second_half_minute)) * 60
                predicted_total = int(predicted_total) + (1 if predicted_total % 1 > 0 else 0)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ç–∞–ª–∞–º
                if total_goals > minute:  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø
                    recommendation = f"–¢–ë {predicted_total - 4}"
                    tempo = "–ë–´–°–¢–†–´–ô"
                else:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø
                    recommendation = f"–¢–ú {predicted_total + 3}"
                    tempo = "–ú–ï–î–õ–ï–ù–ù–´–ô"
                
                return {
                    'predicted_total': predicted_total,
                    'recommendation': recommendation,
                    'tempo': tempo,
                    'current_goals': total_goals,
                    'minute': minute
                }
            
            return {}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ç–∞–ª–æ–≤: {e}")
            return {}
    
    def generate_enhanced_reasoning(self, match: MatchData, sport_type: str, additional_stats: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT"""
        try:
            stats_text = ""
            if additional_stats:
                stats_text = f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {additional_stats}"
            
            reasoning_prompt = f"""
            –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏.
            
            –ú–∞—Ç—á: {match.team1} vs {match.team2} ({match.score}, {match.minute}')
            –õ–∏–≥–∞: {match.league}
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {match.recommendation_value}
            {stats_text}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –±–µ–∑ —ç–º–æ—Ü–∏–π
            - –î–ª–∏–Ω–∞: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            - –£–ø–æ–º—è–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Å—á–µ—Ç, –≤—Ä–µ–º—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            - –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è —Å—Ç–∞–≤–∫–∞
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –±–µ–∑ JSON.
            """
            
            response = self._call_openai_gpt_enhanced(reasoning_prompt)
            return response.strip()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è: {e}")
            return f"–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {match.team1} vs {match.team2}: –≤–µ–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Å—á–µ—Ç–µ {match.score} –Ω–∞ {match.minute} –º–∏–Ω—É—Ç–µ."

    def test_enhanced_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI"""
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞"}],
                max_tokens=20,
                timeout=10
            )
            self.logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            return False